{"version":3,"file":"react-table.production.min.js","sources":["../src/publicUtils.js","../src/utils.js","../src/makeDefaultPluginHooks.js","../src/hooks/useColumnVisibility.js","../src/hooks/useTable.js","../src/plugin-hooks/useExpanded.js","../src/filterTypes.js","../src/plugin-hooks/useFilters.js","../src/plugin-hooks/useGlobalFilter.js","../src/aggregations.js","../src/plugin-hooks/useGroupBy.js","../src/sortTypes.js","../src/plugin-hooks/useSortBy.js","../src/plugin-hooks/usePagination.js","../src/plugin-hooks/_UNSTABLE_usePivotColumns.js","../src/plugin-hooks/useRowSelect.js","../src/plugin-hooks/useRowState.js","../src/plugin-hooks/useColumnOrder.js","../src/plugin-hooks/useResizeColumns.js","../src/plugin-hooks/useAbsoluteLayout.js","../src/plugin-hooks/useBlockLayout.js","../src/plugin-hooks/useFlexLayout.js"],"sourcesContent":["import React from 'react'\n\nlet renderErr = 'Renderer Error ☝️'\n\nexport const actions = {\n  init: 'init',\n}\n\nexport const defaultColumn = {\n  Cell: ({ value = '' }) => value,\n  width: 150,\n  minWidth: 0,\n  maxWidth: Number.MAX_SAFE_INTEGER,\n}\n\nfunction mergeProps(...propList) {\n  return propList.reduce((props, next) => {\n    const { style, className, ...rest } = next\n\n    props = {\n      ...props,\n      ...rest,\n    }\n\n    if (style) {\n      props.style = props.style\n        ? { ...(props.style || {}), ...(style || {}) }\n        : style\n    }\n\n    if (className) {\n      props.className = props.className\n        ? props.className + ' ' + className\n        : className\n    }\n\n    if (props.className === '') {\n      delete props.className\n    }\n\n    return props\n  }, {})\n}\n\nfunction handlePropGetter(prevProps, userProps, meta) {\n  // Handle a lambda, pass it the previous props\n  if (typeof userProps === 'function') {\n    return handlePropGetter({}, userProps(prevProps, meta))\n  }\n\n  // Handle an array, merge each item as separate props\n  if (Array.isArray(userProps)) {\n    return mergeProps(prevProps, ...userProps)\n  }\n\n  // Handle an object by default, merge the two objects\n  return mergeProps(prevProps, userProps)\n}\n\nexport const makePropGetter = (hooks, meta = {}) => {\n  return (userProps = {}) =>\n    [...hooks, userProps].reduce(\n      (prev, next) =>\n        handlePropGetter(prev, next, {\n          ...meta,\n          userProps,\n        }),\n      {}\n    )\n}\n\nexport const reduceHooks = (hooks, initial, meta = {}, allowUndefined) =>\n  hooks.reduce((prev, next) => {\n    const nextValue = next(prev, meta)\n    if (process.env.NODE_ENV !== 'production') {\n      if (!allowUndefined && typeof nextValue === 'undefined') {\n        console.info(next)\n        throw new Error(\n          'React Table: A reducer hook ☝️ just returned undefined! This is not allowed.'\n        )\n      }\n    }\n    return nextValue\n  }, initial)\n\nexport const loopHooks = (hooks, context, meta = {}) =>\n  hooks.forEach(hook => {\n    const nextValue = hook(context, meta)\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof nextValue !== 'undefined') {\n        console.info(hook, nextValue)\n        throw new Error(\n          'React Table: A loop-type hook ☝️ just returned a value! This is not allowed.'\n        )\n      }\n    }\n  })\n\nexport function ensurePluginOrder(plugins, befores, pluginName, afters) {\n  if (process.env.NODE_ENV !== 'production' && afters) {\n    throw new Error(\n      `Defining plugins in the \"after\" section of ensurePluginOrder is no longer supported (see plugin ${pluginName})`\n    )\n  }\n  const pluginIndex = plugins.findIndex(\n    plugin => plugin.pluginName === pluginName\n  )\n\n  if (pluginIndex === -1) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`The plugin \"${pluginName}\" was not found in the plugin list!\nThis usually means you need to need to name your plugin hook by setting the 'pluginName' property of the hook function, eg:\n\n  ${pluginName}.pluginName = '${pluginName}'\n`)\n    }\n  }\n\n  befores.forEach(before => {\n    const beforeIndex = plugins.findIndex(\n      plugin => plugin.pluginName === before\n    )\n    if (beforeIndex > -1 && beforeIndex > pluginIndex) {\n      if (process.env.NODE_ENV !== 'production') {\n        throw new Error(\n          `React Table: The ${pluginName} plugin hook must be placed after the ${before} plugin hook!`\n        )\n      }\n    }\n  })\n}\n\nexport function functionalUpdate(updater, old) {\n  return typeof updater === 'function' ? updater(old) : updater\n}\n\nexport function useGetLatest(obj) {\n  const ref = React.useRef()\n  ref.current = obj\n\n  return React.useCallback(() => ref.current, [])\n}\n\n// SSR has issues with useLayoutEffect still, so use useEffect during SSR\nexport const safeUseLayoutEffect =\n  typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect\n\nexport function useMountedLayoutEffect(fn, deps) {\n  const mountedRef = React.useRef(false)\n\n  safeUseLayoutEffect(() => {\n    if (mountedRef.current) {\n      fn()\n    }\n    mountedRef.current = true\n    // eslint-disable-next-line\n  }, deps)\n}\n\nexport function useAsyncDebounce(defaultFn, defaultWait = 0) {\n  const debounceRef = React.useRef({})\n\n  const getDefaultFn = useGetLatest(defaultFn)\n  const getDefaultWait = useGetLatest(defaultWait)\n\n  return React.useCallback(\n    async (...args) => {\n      if (!debounceRef.current.promise) {\n        debounceRef.current.promise = new Promise((resolve, reject) => {\n          debounceRef.current.resolve = resolve\n          debounceRef.current.reject = reject\n        })\n      }\n\n      if (debounceRef.current.timeout) {\n        clearTimeout(debounceRef.current.timeout)\n      }\n\n      debounceRef.current.timeout = setTimeout(async () => {\n        delete debounceRef.current.timeout\n        try {\n          debounceRef.current.resolve(await getDefaultFn()(...args))\n        } catch (err) {\n          debounceRef.current.reject(err)\n        } finally {\n          delete debounceRef.current.promise\n        }\n      }, getDefaultWait())\n\n      return debounceRef.current.promise\n    },\n    [getDefaultFn, getDefaultWait]\n  )\n}\n\nexport function makeRenderer(instance, column, meta = {}) {\n  return (type, userProps = {}) => {\n    const Comp = typeof type === 'string' ? column[type] : type\n\n    if (typeof Comp === 'undefined') {\n      console.info(column)\n      throw new Error(renderErr)\n    }\n\n    return flexRender(Comp, { ...instance, column, ...meta, ...userProps })\n  }\n}\n\nexport function flexRender(Comp, props) {\n  return isReactComponent(Comp) ? <Comp {...props} /> : Comp\n}\n\nfunction isReactComponent(component) {\n  return (\n    isClassComponent(component) ||\n    typeof component === 'function' ||\n    isExoticComponent(component)\n  )\n}\n\nfunction isClassComponent(component) {\n  return (\n    typeof component === 'function' &&\n    (() => {\n      const proto = Object.getPrototypeOf(component)\n      return proto.prototype && proto.prototype.isReactComponent\n    })()\n  )\n}\n\nfunction isExoticComponent(component) {\n  return (\n    typeof component === 'object' &&\n    typeof component.$$typeof === 'symbol' &&\n    ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)\n  )\n}\n","import React from 'react'\nimport { defaultColumn } from './publicUtils'\n\n// Find the depth of the columns\nexport function findMaxDepth(columns, depth = 0) {\n  return columns.reduce((prev, curr) => {\n    if (curr.columns) {\n      return Math.max(prev, findMaxDepth(curr.columns, depth + 1))\n    }\n    return depth\n  }, 0)\n}\n\n// Build the visible columns, headers and flat column list\nexport function linkColumnStructure(columns, parent, depth = 0) {\n  return columns.map(column => {\n    column = {\n      ...column,\n      parent,\n      depth,\n    }\n\n    assignColumnAccessor(column)\n\n    if (column.columns) {\n      column.columns = linkColumnStructure(column.columns, column, depth + 1)\n    }\n    return column\n  })\n}\n\nexport function flattenColumns(columns) {\n  return flattenBy(columns, 'columns')\n}\n\nexport function assignColumnAccessor(column) {\n  // First check for string accessor\n  let { id, accessor, Header } = column\n\n  if (typeof accessor === 'string') {\n    id = id || accessor\n    const accessorPath = accessor.split('.')\n    accessor = row => getBy(row, accessorPath)\n  }\n\n  if (!id && typeof Header === 'string' && Header) {\n    id = Header\n  }\n\n  if (!id && column.columns) {\n    console.error(column)\n    throw new Error('A column ID (or unique \"Header\" value) is required!')\n  }\n\n  if (!id) {\n    console.error(column)\n    throw new Error('A column ID (or string accessor) is required!')\n  }\n\n  Object.assign(column, {\n    id,\n    accessor,\n  })\n\n  return column\n}\n\nexport function decorateColumn(column, userDefaultColumn) {\n  if (!userDefaultColumn) {\n    throw new Error()\n  }\n  Object.assign(column, {\n    // Make sure there is a fallback header, just in case\n    Header: () => <>&nbsp;</>,\n    Footer: () => <>&nbsp;</>,\n    ...defaultColumn,\n    ...userDefaultColumn,\n    ...column,\n  })\n\n  Object.assign(column, {\n    originalWidth: column.width,\n  })\n\n  return column\n}\n\n// Build the header groups from the bottom up\nexport function makeHeaderGroups(allColumns, defaultColumn) {\n  const headerGroups = []\n\n  let scanColumns = allColumns\n\n  let uid = 0\n  const getUID = () => uid++\n\n  while (scanColumns.length) {\n    // The header group we are creating\n    const headerGroup = {\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const parentColumns = []\n\n    const hasParents = scanColumns.some(d => d.parent)\n\n    // Scan each column for parents\n    scanColumns.forEach(column => {\n      // What is the latest (last) parent column?\n      let latestParentColumn = [...parentColumns].reverse()[0]\n\n      let newParent\n\n      if (hasParents) {\n        // If the column has a parent, add it if necessary\n        if (column.parent) {\n          newParent = {\n            ...column.parent,\n            originalId: column.parent.id,\n            id: `${column.parent.id}_${getUID()}`,\n            headers: [column],\n          }\n        } else {\n          // If other columns have parents, we'll need to add a place holder if necessary\n          const originalId = `${column.id}_placeholder`\n          newParent = decorateColumn(\n            {\n              originalId,\n              id: `${column.id}_placeholder_${getUID()}`,\n              placeholderOf: column,\n              headers: [column],\n            },\n            defaultColumn\n          )\n        }\n\n        // If the resulting parent columns are the same, just add\n        // the column and increment the header span\n        if (\n          latestParentColumn &&\n          latestParentColumn.originalId === newParent.originalId\n        ) {\n          latestParentColumn.headers.push(column)\n        } else {\n          parentColumns.push(newParent)\n        }\n      }\n\n      headerGroup.headers.push(column)\n    })\n\n    headerGroups.push(headerGroup)\n\n    // Start scanning the parent columns\n    scanColumns = parentColumns\n  }\n\n  return headerGroups.reverse()\n}\n\nconst pathObjCache = new Map()\n\nexport function getBy(obj, path, def) {\n  if (!path) {\n    return obj\n  }\n  const cacheKey = typeof path === 'function' ? path : JSON.stringify(path)\n\n  const pathObj =\n    pathObjCache.get(cacheKey) ||\n    (() => {\n      const pathObj = makePathArray(path)\n      pathObjCache.set(cacheKey, pathObj)\n      return pathObj\n    })()\n\n  let val\n\n  try {\n    val = pathObj.reduce((cursor, pathPart) => cursor[pathPart], obj)\n  } catch (e) {\n    // continue regardless of error\n  }\n  return typeof val !== 'undefined' ? val : def\n}\n\nexport function getFirstDefined(...args) {\n  for (let i = 0; i < args.length; i += 1) {\n    if (typeof args[i] !== 'undefined') {\n      return args[i]\n    }\n  }\n}\n\nexport function getElementDimensions(element) {\n  const rect = element.getBoundingClientRect()\n  const style = window.getComputedStyle(element)\n  const margins = {\n    left: parseInt(style.marginLeft),\n    right: parseInt(style.marginRight),\n  }\n  const padding = {\n    left: parseInt(style.paddingLeft),\n    right: parseInt(style.paddingRight),\n  }\n  return {\n    left: Math.ceil(rect.left),\n    width: Math.ceil(rect.width),\n    outerWidth: Math.ceil(\n      rect.width + margins.left + margins.right + padding.left + padding.right\n    ),\n    marginLeft: margins.left,\n    marginRight: margins.right,\n    paddingLeft: padding.left,\n    paddingRight: padding.right,\n    scrollWidth: element.scrollWidth,\n  }\n}\n\nexport function isFunction(a) {\n  if (typeof a === 'function') {\n    return a\n  }\n}\n\nexport function flattenBy(arr, key) {\n  const flat = []\n\n  const recurse = arr => {\n    arr.forEach(d => {\n      if (!d[key]) {\n        flat.push(d)\n      } else {\n        recurse(d[key])\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function expandRows(\n  rows,\n  { manualExpandedKey, expanded, expandSubRows = true }\n) {\n  const expandedRows = []\n\n  const handleRow = row => {\n    row.isExpanded =\n      (row.original && row.original[manualExpandedKey]) || expanded[row.id]\n\n    row.canExpand = row.subRows && !!row.subRows.length\n\n    expandedRows.push(row)\n\n    if (expandSubRows && row.subRows && row.subRows.length && row.isExpanded) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rows.forEach(handleRow)\n\n  return expandedRows\n}\n\nexport function getFilterMethod(filter, userFilterTypes, filterTypes) {\n  return (\n    isFunction(filter) ||\n    userFilterTypes[filter] ||\n    filterTypes[filter] ||\n    filterTypes.text\n  )\n}\n\nexport function shouldAutoRemoveFilter(autoRemove, value, column) {\n  return autoRemove ? autoRemove(value, column) : typeof value === 'undefined'\n}\n\nexport function unpreparedAccessWarning() {\n  throw new Error(\n    'React-Table: You have not called prepareRow(row) one or more rows you are attempting to render.'\n  )\n}\n\nlet passiveSupported = null\nexport function passiveEventSupported() {\n  // memoize support to avoid adding multiple test events\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    window.addEventListener('test', null, options)\n    window.removeEventListener('test', null, options)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\n//\n\nconst reOpenBracket = /\\[/g\nconst reCloseBracket = /\\]/g\n\nfunction makePathArray(obj) {\n  return (\n    flattenDeep(obj)\n      // remove all periods in parts\n      .map(d => String(d).replace('.', '_'))\n      // join parts using period\n      .join('.')\n      // replace brackets with periods\n      .replace(reOpenBracket, '.')\n      .replace(reCloseBracket, '')\n      // split it back out on periods\n      .split('.')\n  )\n}\n\nfunction flattenDeep(arr, newArr = []) {\n  if (!Array.isArray(arr)) {\n    newArr.push(arr)\n  } else {\n    for (let i = 0; i < arr.length; i += 1) {\n      flattenDeep(arr[i], newArr)\n    }\n  }\n  return newArr\n}\n","const defaultGetTableProps = props => ({\n  role: 'table',\n  ...props,\n})\n\nconst defaultGetTableBodyProps = props => ({\n  role: 'rowgroup',\n  ...props,\n})\n\nconst defaultGetHeaderProps = (props, { column }) => ({\n  key: `header_${column.id}`,\n  colSpan: column.totalVisibleHeaderCount,\n  role: 'columnheader',\n  ...props,\n})\n\nconst defaultGetFooterProps = (props, { column }) => ({\n  key: `footer_${column.id}`,\n  colSpan: column.totalVisibleHeaderCount,\n  ...props,\n})\n\nconst defaultGetHeaderGroupProps = (props, { index }) => ({\n  key: `headerGroup_${index}`,\n  role: 'row',\n  ...props,\n})\n\nconst defaultGetFooterGroupProps = (props, { index }) => ({\n  key: `footerGroup_${index}`,\n  ...props,\n})\n\nconst defaultGetRowProps = (props, { row }) => ({\n  key: `row_${row.id}`,\n  role: 'row',\n  ...props,\n})\n\nconst defaultGetCellProps = (props, { cell }) => ({\n  key: `cell_${cell.row.id}_${cell.column.id}`,\n  role: 'cell',\n  ...props,\n})\n\nexport default function makeDefaultPluginHooks() {\n  return {\n    useOptions: [],\n    stateReducers: [],\n    useControlledState: [],\n    columns: [],\n    columnsDeps: [],\n    allColumns: [],\n    allColumnsDeps: [],\n    accessValue: [],\n    materializedColumns: [],\n    materializedColumnsDeps: [],\n    useInstanceAfterData: [],\n    visibleColumns: [],\n    visibleColumnsDeps: [],\n    headerGroups: [],\n    headerGroupsDeps: [],\n    useInstanceBeforeDimensions: [],\n    useInstance: [],\n    prepareRow: [],\n    getTableProps: [defaultGetTableProps],\n    getTableBodyProps: [defaultGetTableBodyProps],\n    getHeaderGroupProps: [defaultGetHeaderGroupProps],\n    getFooterGroupProps: [defaultGetFooterGroupProps],\n    getHeaderProps: [defaultGetHeaderProps],\n    getFooterProps: [defaultGetFooterProps],\n    getRowProps: [defaultGetRowProps],\n    getCellProps: [defaultGetCellProps],\n    useFinalInstance: [],\n  }\n}\n","import React from 'react'\n\nimport {\n  actions,\n  functionalUpdate,\n  useGetLatest,\n  makePropGetter,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nactions.resetHiddenColumns = 'resetHiddenColumns'\nactions.toggleHideColumn = 'toggleHideColumn'\nactions.setHiddenColumns = 'setHiddenColumns'\nactions.toggleHideAllColumns = 'toggleHideAllColumns'\n\nexport const useColumnVisibility = hooks => {\n  hooks.getToggleHiddenProps = [defaultGetToggleHiddenProps]\n  hooks.getToggleHideAllColumnsProps = [defaultGetToggleHideAllColumnsProps]\n\n  hooks.stateReducers.push(reducer)\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\n  hooks.headerGroupsDeps.push((deps, { instance }) => [\n    ...deps,\n    instance.state.hiddenColumns,\n  ])\n  hooks.useInstance.push(useInstance)\n}\n\nuseColumnVisibility.pluginName = 'useColumnVisibility'\n\nconst defaultGetToggleHiddenProps = (props, { column }) => [\n  props,\n  {\n    onChange: e => {\n      column.toggleHidden(!e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: column.isVisible,\n    title: 'Toggle Column Visible',\n  },\n]\n\nconst defaultGetToggleHideAllColumnsProps = (props, { instance }) => [\n  props,\n  {\n    onChange: e => {\n      instance.toggleHideAllColumns(!e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: !instance.allColumnsHidden && !instance.state.hiddenColumns.length,\n    title: 'Toggle All Columns Hidden',\n    indeterminate:\n      !instance.allColumnsHidden && instance.state.hiddenColumns.length,\n  },\n]\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      hiddenColumns: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetHiddenColumns) {\n    return {\n      ...state,\n      hiddenColumns: instance.initialState.hiddenColumns || [],\n    }\n  }\n\n  if (action.type === actions.toggleHideColumn) {\n    const should =\n      typeof action.value !== 'undefined'\n        ? action.value\n        : !state.hiddenColumns.includes(action.columnId)\n\n    const hiddenColumns = should\n      ? [...state.hiddenColumns, action.columnId]\n      : state.hiddenColumns.filter(d => d !== action.columnId)\n\n    return {\n      ...state,\n      hiddenColumns,\n    }\n  }\n\n  if (action.type === actions.setHiddenColumns) {\n    return {\n      ...state,\n      hiddenColumns: functionalUpdate(action.value, state.hiddenColumns),\n    }\n  }\n\n  if (action.type === actions.toggleHideAllColumns) {\n    const shouldAll =\n      typeof action.value !== 'undefined'\n        ? action.value\n        : !state.hiddenColumns.length\n\n    return {\n      ...state,\n      hiddenColumns: shouldAll ? instance.allColumns.map(d => d.id) : [],\n    }\n  }\n}\n\nfunction useInstanceBeforeDimensions(instance) {\n  const {\n    headers,\n    state: { hiddenColumns },\n  } = instance\n\n  const isMountedRef = React.useRef(false)\n\n  if (!isMountedRef.current) {\n  }\n\n  const handleColumn = (column, parentVisible) => {\n    column.isVisible = parentVisible && !hiddenColumns.includes(column.id)\n\n    let totalVisibleHeaderCount = 0\n\n    if (column.headers && column.headers.length) {\n      column.headers.forEach(\n        subColumn =>\n          (totalVisibleHeaderCount += handleColumn(subColumn, column.isVisible))\n      )\n    } else {\n      totalVisibleHeaderCount = column.isVisible ? 1 : 0\n    }\n\n    column.totalVisibleHeaderCount = totalVisibleHeaderCount\n\n    return totalVisibleHeaderCount\n  }\n\n  let totalVisibleHeaderCount = 0\n\n  headers.forEach(\n    subHeader => (totalVisibleHeaderCount += handleColumn(subHeader, true))\n  )\n}\n\nfunction useInstance(instance) {\n  const {\n    columns,\n    flatHeaders,\n    dispatch,\n    allColumns,\n    getHooks,\n    state: { hiddenColumns },\n    autoResetHiddenColumns = true,\n  } = instance\n\n  const getInstance = useGetLatest(instance)\n\n  const allColumnsHidden = allColumns.length === hiddenColumns.length\n\n  const toggleHideColumn = React.useCallback(\n    (columnId, value) =>\n      dispatch({ type: actions.toggleHideColumn, columnId, value }),\n    [dispatch]\n  )\n\n  const setHiddenColumns = React.useCallback(\n    value => dispatch({ type: actions.setHiddenColumns, value }),\n    [dispatch]\n  )\n\n  const toggleHideAllColumns = React.useCallback(\n    value => dispatch({ type: actions.toggleHideAllColumns, value }),\n    [dispatch]\n  )\n\n  const getToggleHideAllColumnsProps = makePropGetter(\n    getHooks().getToggleHideAllColumnsProps,\n    { instance: getInstance() }\n  )\n\n  flatHeaders.forEach(column => {\n    column.toggleHidden = value => {\n      dispatch({\n        type: actions.toggleHideColumn,\n        columnId: column.id,\n        value,\n      })\n    }\n\n    column.getToggleHiddenProps = makePropGetter(\n      getHooks().getToggleHiddenProps,\n      {\n        instance: getInstance(),\n        column,\n      }\n    )\n  })\n\n  const getAutoResetHiddenColumns = useGetLatest(autoResetHiddenColumns)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetHiddenColumns()) {\n      dispatch({ type: actions.resetHiddenColumns })\n    }\n  }, [dispatch, columns])\n\n  Object.assign(instance, {\n    allColumnsHidden,\n    toggleHideColumn,\n    setHiddenColumns,\n    toggleHideAllColumns,\n    getToggleHideAllColumnsProps,\n  })\n}\n","import React from 'react'\n\n//\n\nimport {\n  linkColumnStructure,\n  flattenColumns,\n  assignColumnAccessor,\n  unpreparedAccessWarning,\n  makeHeaderGroups,\n  decorateColumn,\n} from '../utils'\n\nimport {\n  useGetLatest,\n  reduceHooks,\n  actions,\n  loopHooks,\n  makePropGetter,\n  makeRenderer,\n} from '../publicUtils'\n\nimport makeDefaultPluginHooks from '../makeDefaultPluginHooks'\n\nimport { useColumnVisibility } from './useColumnVisibility'\n\nconst defaultInitialState = {}\nconst defaultColumnInstance = {}\nconst defaultReducer = (state, action, prevState) => state\nconst defaultGetSubRows = (row, index) => row.subRows || []\nconst defaultGetRowId = (row, index, parent) =>\n  `${parent ? [parent.id, index].join('.') : index}`\nconst defaultUseControlledState = d => d\n\nfunction applyDefaults(props) {\n  const {\n    initialState = defaultInitialState,\n    defaultColumn = defaultColumnInstance,\n    getSubRows = defaultGetSubRows,\n    getRowId = defaultGetRowId,\n    stateReducer = defaultReducer,\n    useControlledState = defaultUseControlledState,\n    ...rest\n  } = props\n\n  return {\n    ...rest,\n    initialState,\n    defaultColumn,\n    getSubRows,\n    getRowId,\n    stateReducer,\n    useControlledState,\n  }\n}\n\nexport const useTable = (props, ...plugins) => {\n  // Apply default props\n  props = applyDefaults(props)\n\n  // Add core plugins\n  plugins = [useColumnVisibility, ...plugins]\n\n  // Create the table instance\n  let instanceRef = React.useRef({})\n\n  // Create a getter for the instance (helps avoid a lot of potential memory leaks)\n  const getInstance = useGetLatest(instanceRef.current)\n\n  // Assign the props, plugins and hooks to the instance\n  Object.assign(getInstance(), {\n    ...props,\n    plugins,\n    hooks: makeDefaultPluginHooks(),\n  })\n\n  // Allow plugins to register hooks as early as possible\n  plugins.filter(Boolean).forEach(plugin => {\n    plugin(getInstance().hooks)\n  })\n\n  // Consume all hooks and make a getter for them\n  const getHooks = useGetLatest(getInstance().hooks)\n  getInstance().getHooks = getHooks\n  delete getInstance().hooks\n\n  // Allow useOptions hooks to modify the options coming into the table\n  Object.assign(\n    getInstance(),\n    reduceHooks(getHooks().useOptions, applyDefaults(props))\n  )\n\n  const {\n    data,\n    columns: userColumns,\n    initialState,\n    defaultColumn,\n    getSubRows,\n    getRowId,\n    stateReducer,\n    useControlledState,\n  } = getInstance()\n\n  // Setup user reducer ref\n  const getStateReducer = useGetLatest(stateReducer)\n\n  // Build the reducer\n  const reducer = React.useCallback(\n    (state, action) => {\n      // Detect invalid actions\n      if (!action.type) {\n        console.info({ action })\n        throw new Error('Unknown Action 👆')\n      }\n\n      // Reduce the state from all plugin reducers\n      return [\n        ...getHooks().stateReducers,\n        // Allow the user to add their own state reducer(s)\n        ...(Array.isArray(getStateReducer())\n          ? getStateReducer()\n          : [getStateReducer()]),\n      ].reduce(\n        (s, handler) => handler(s, action, state, getInstance()) || s,\n        state\n      )\n    },\n    [getHooks, getStateReducer, getInstance]\n  )\n\n  // Start the reducer\n  const [reducerState, dispatch] = React.useReducer(reducer, undefined, () =>\n    reducer(initialState, { type: actions.init })\n  )\n\n  // Allow the user to control the final state with hooks\n  const state = reduceHooks(\n    [...getHooks().useControlledState, useControlledState],\n    reducerState,\n    { instance: getInstance() }\n  )\n\n  Object.assign(getInstance(), {\n    state,\n    dispatch,\n  })\n\n  // Decorate All the columns\n  const columns = React.useMemo(\n    () =>\n      linkColumnStructure(\n        reduceHooks(getHooks().columns, userColumns, {\n          instance: getInstance(),\n        })\n      ),\n    [\n      getHooks,\n      getInstance,\n      userColumns,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().columnsDeps, [], { instance: getInstance() }),\n    ]\n  )\n  getInstance().columns = columns\n\n  // Get the flat list of all columns and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n  let allColumns = React.useMemo(\n    () =>\n      reduceHooks(getHooks().allColumns, flattenColumns(columns), {\n        instance: getInstance(),\n      }).map(assignColumnAccessor),\n    [\n      columns,\n      getHooks,\n      getInstance,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().allColumnsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n  getInstance().allColumns = allColumns\n\n  // Access the row model using initial columns\n  const [rows, flatRows, rowsById] = React.useMemo(() => {\n    let rows = []\n    let flatRows = []\n    const rowsById = {}\n\n    const allColumnsQueue = [...allColumns]\n\n    while (allColumnsQueue.length) {\n      const column = allColumnsQueue.shift()\n      accessRowsForColumn({\n        data,\n        rows,\n        flatRows,\n        rowsById,\n        column,\n        getRowId,\n        getSubRows,\n        accessValueHooks: getHooks().accessValue,\n        getInstance,\n      })\n    }\n\n    return [rows, flatRows, rowsById]\n  }, [allColumns, data, getRowId, getSubRows, getHooks, getInstance])\n\n  Object.assign(getInstance(), {\n    rows,\n    initialRows: [...rows],\n    flatRows,\n    rowsById,\n    // materializedColumns,\n  })\n\n  loopHooks(getHooks().useInstanceAfterData, getInstance())\n\n  // Get the flat list of all columns AFTER the rows\n  // have been access, and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n  let visibleColumns = React.useMemo(\n    () =>\n      reduceHooks(getHooks().visibleColumns, allColumns, {\n        instance: getInstance(),\n      }).map(d => decorateColumn(d, defaultColumn)),\n    [\n      getHooks,\n      allColumns,\n      getInstance,\n      defaultColumn,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().visibleColumnsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n\n  // Combine new visible columns with all columns\n  allColumns = React.useMemo(() => {\n    const columns = [...visibleColumns]\n\n    allColumns.forEach(column => {\n      if (!columns.find(d => d.id === column.id)) {\n        columns.push(column)\n      }\n    })\n\n    return columns\n  }, [allColumns, visibleColumns])\n  getInstance().allColumns = allColumns\n\n  if (process.env.NODE_ENV !== 'production') {\n    const duplicateColumns = allColumns.filter((column, i) => {\n      return allColumns.findIndex(d => d.id === column.id) !== i\n    })\n\n    if (duplicateColumns.length) {\n      console.info(allColumns)\n      throw new Error(\n        `Duplicate columns were found with ids: \"${duplicateColumns\n          .map(d => d.id)\n          .join(', ')}\" in the columns array above`\n      )\n    }\n  }\n\n  // Make the headerGroups\n  const headerGroups = React.useMemo(\n    () =>\n      reduceHooks(\n        getHooks().headerGroups,\n        makeHeaderGroups(visibleColumns, defaultColumn),\n        getInstance()\n      ),\n    [\n      getHooks,\n      visibleColumns,\n      defaultColumn,\n      getInstance,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().headerGroupsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n  getInstance().headerGroups = headerGroups\n\n  // Get the first level of headers\n  const headers = React.useMemo(\n    () => (headerGroups.length ? headerGroups[0].headers : []),\n    [headerGroups]\n  )\n  getInstance().headers = headers\n\n  // Provide a flat header list for utilities\n  getInstance().flatHeaders = headerGroups.reduce(\n    (all, headerGroup) => [...all, ...headerGroup.headers],\n    []\n  )\n\n  loopHooks(getHooks().useInstanceBeforeDimensions, getInstance())\n\n  // Filter columns down to visible ones\n  const visibleColumnsDep = visibleColumns\n    .filter(d => d.isVisible)\n    .map(d => d.id)\n    .sort()\n    .join('_')\n\n  visibleColumns = React.useMemo(\n    () => visibleColumns.filter(d => d.isVisible),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [visibleColumns, visibleColumnsDep]\n  )\n  getInstance().visibleColumns = visibleColumns\n\n  // Header Visibility is needed by this point\n  const [\n    totalColumnsMinWidth,\n    totalColumnsWidth,\n    totalColumnsMaxWidth,\n  ] = calculateHeaderWidths(headers)\n\n  getInstance().totalColumnsMinWidth = totalColumnsMinWidth\n  getInstance().totalColumnsWidth = totalColumnsWidth\n  getInstance().totalColumnsMaxWidth = totalColumnsMaxWidth\n\n  loopHooks(getHooks().useInstance, getInstance())\n\n  // Each materialized header needs to be assigned a render function and other\n  // prop getter properties here.\n  ;[...getInstance().flatHeaders, ...getInstance().allColumns].forEach(\n    column => {\n      // Give columns/headers rendering power\n      column.render = makeRenderer(getInstance(), column)\n\n      // Give columns/headers a default getHeaderProps\n      column.getHeaderProps = makePropGetter(getHooks().getHeaderProps, {\n        instance: getInstance(),\n        column,\n      })\n\n      // Give columns/headers a default getFooterProps\n      column.getFooterProps = makePropGetter(getHooks().getFooterProps, {\n        instance: getInstance(),\n        column,\n      })\n    }\n  )\n\n  getInstance().headerGroups = React.useMemo(\n    () =>\n      headerGroups.filter((headerGroup, i) => {\n        // Filter out any headers and headerGroups that don't have visible columns\n        headerGroup.headers = headerGroup.headers.filter(column => {\n          const recurse = headers =>\n            headers.filter(column => {\n              if (column.headers) {\n                return recurse(column.headers)\n              }\n              return column.isVisible\n            }).length\n          if (column.headers) {\n            return recurse(column.headers)\n          }\n          return column.isVisible\n        })\n\n        // Give headerGroups getRowProps\n        if (headerGroup.headers.length) {\n          headerGroup.getHeaderGroupProps = makePropGetter(\n            getHooks().getHeaderGroupProps,\n            { instance: getInstance(), headerGroup, index: i }\n          )\n\n          headerGroup.getFooterGroupProps = makePropGetter(\n            getHooks().getFooterGroupProps,\n            { instance: getInstance(), headerGroup, index: i }\n          )\n\n          return true\n        }\n\n        return false\n      }),\n    [headerGroups, getInstance, getHooks]\n  )\n\n  getInstance().footerGroups = [...getInstance().headerGroups].reverse()\n\n  // The prepareRow function is absolutely necessary and MUST be called on\n  // any rows the user wishes to be displayed.\n\n  getInstance().prepareRow = React.useCallback(\n    row => {\n      row.getRowProps = makePropGetter(getHooks().getRowProps, {\n        instance: getInstance(),\n        row,\n      })\n\n      // Build the visible cells for each row\n      row.allCells = allColumns.map(column => {\n        const value = row.values[column.id]\n\n        const cell = {\n          column,\n          row,\n          value,\n        }\n\n        // Give each cell a getCellProps base\n        cell.getCellProps = makePropGetter(getHooks().getCellProps, {\n          instance: getInstance(),\n          cell,\n        })\n\n        // Give each cell a renderer function (supports multiple renderers)\n        cell.render = makeRenderer(getInstance(), column, {\n          row,\n          cell,\n          value,\n        })\n\n        return cell\n      })\n\n      row.cells = visibleColumns.map(column =>\n        row.allCells.find(cell => cell.column.id === column.id)\n      )\n\n      // need to apply any row specific hooks (useExpanded requires this)\n      loopHooks(getHooks().prepareRow, row, { instance: getInstance() })\n    },\n    [getHooks, getInstance, allColumns, visibleColumns]\n  )\n\n  getInstance().getTableProps = makePropGetter(getHooks().getTableProps, {\n    instance: getInstance(),\n  })\n\n  getInstance().getTableBodyProps = makePropGetter(\n    getHooks().getTableBodyProps,\n    {\n      instance: getInstance(),\n    }\n  )\n\n  loopHooks(getHooks().useFinalInstance, getInstance())\n\n  return getInstance()\n}\n\nfunction calculateHeaderWidths(headers, left = 0) {\n  let sumTotalMinWidth = 0\n  let sumTotalWidth = 0\n  let sumTotalMaxWidth = 0\n  let sumTotalFlexWidth = 0\n\n  headers.forEach(header => {\n    let { headers: subHeaders } = header\n\n    header.totalLeft = left\n\n    if (subHeaders && subHeaders.length) {\n      const [\n        totalMinWidth,\n        totalWidth,\n        totalMaxWidth,\n        totalFlexWidth,\n      ] = calculateHeaderWidths(subHeaders, left)\n      header.totalMinWidth = totalMinWidth\n      header.totalWidth = totalWidth\n      header.totalMaxWidth = totalMaxWidth\n      header.totalFlexWidth = totalFlexWidth\n    } else {\n      header.totalMinWidth = header.minWidth\n      header.totalWidth = Math.min(\n        Math.max(header.minWidth, header.width),\n        header.maxWidth\n      )\n      header.totalMaxWidth = header.maxWidth\n      header.totalFlexWidth = header.canResize ? header.totalWidth : 0\n    }\n    if (header.isVisible) {\n      left += header.totalWidth\n      sumTotalMinWidth += header.totalMinWidth\n      sumTotalWidth += header.totalWidth\n      sumTotalMaxWidth += header.totalMaxWidth\n      sumTotalFlexWidth += header.totalFlexWidth\n    }\n  })\n\n  return [sumTotalMinWidth, sumTotalWidth, sumTotalMaxWidth, sumTotalFlexWidth]\n}\n\nfunction accessRowsForColumn({\n  data,\n  rows,\n  flatRows,\n  rowsById,\n  column,\n  getRowId,\n  getSubRows,\n  accessValueHooks,\n  getInstance,\n}) {\n  // Access the row's data column-by-column\n  // We do it this way so we can incrementally add materialized\n  // columns after the first pass and avoid excessive looping\n  const accessRow = (originalRow, rowIndex, depth = 0, parent, parentRows) => {\n    // Keep the original reference around\n    const original = originalRow\n\n    const id = getRowId(originalRow, rowIndex, parent)\n\n    let row = rowsById[id]\n\n    // If the row hasn't been created, let's make it\n    if (!row) {\n      row = {\n        id,\n        original,\n        index: rowIndex,\n        depth,\n        cells: [{}], // This is a dummy cell\n      }\n\n      // Override common array functions (and the dummy cell's getCellProps function)\n      // to show an error if it is accessed without calling prepareRow\n      row.cells.map = unpreparedAccessWarning\n      row.cells.filter = unpreparedAccessWarning\n      row.cells.forEach = unpreparedAccessWarning\n      row.cells[0].getCellProps = unpreparedAccessWarning\n\n      // Create the cells and values\n      row.values = {}\n\n      // Push this row into the parentRows array\n      parentRows.push(row)\n      // Keep track of every row in a flat array\n      flatRows.push(row)\n      // Also keep track of every row by its ID\n      rowsById[id] = row\n\n      // Get the original subrows\n      row.originalSubRows = getSubRows(originalRow, rowIndex)\n\n      // Then recursively access them\n      if (row.originalSubRows) {\n        const subRows = []\n        row.originalSubRows.forEach((d, i) =>\n          accessRow(d, i, depth + 1, row, subRows)\n        )\n        // Keep the new subRows array on the row\n        row.subRows = subRows\n      }\n    } else if (row.subRows) {\n      // If the row exists, then it's already been accessed\n      // Keep recursing, but don't worry about passing the\n      // accumlator array (those rows already exist)\n      row.originalSubRows.forEach((d, i) => accessRow(d, i, depth + 1, row))\n    }\n\n    // If the column has an accessor, use it to get a value\n    if (column.accessor) {\n      row.values[column.id] = column.accessor(originalRow, rowIndex, row)\n    }\n\n    // Allow plugins to manipulate the column value\n    row.values[column.id] = reduceHooks(\n      accessValueHooks,\n      row.values[column.id],\n      {\n        row,\n        column,\n        instance: getInstance(),\n      },\n      true\n    )\n  }\n\n  data.forEach((originalRow, rowIndex) =>\n    accessRow(originalRow, rowIndex, 0, undefined, rows)\n  )\n}\n","import React from 'react'\n\nimport { expandRows } from '../utils'\n\nimport {\n  useGetLatest,\n  actions,\n  useMountedLayoutEffect,\n  makePropGetter,\n  ensurePluginOrder,\n} from '../publicUtils'\n\n// Actions\nactions.resetExpanded = 'resetExpanded'\nactions.toggleRowExpanded = 'toggleRowExpanded'\nactions.toggleAllRowsExpanded = 'toggleAllRowsExpanded'\n\nexport const useExpanded = hooks => {\n  hooks.getToggleAllRowsExpandedProps = [defaultGetToggleAllRowsExpandedProps]\n  hooks.getToggleRowExpandedProps = [defaultGetToggleRowExpandedProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseExpanded.pluginName = 'useExpanded'\n\nconst defaultGetToggleAllRowsExpandedProps = (props, { instance }) => [\n  props,\n  {\n    onClick: e => {\n      instance.toggleAllRowsExpanded()\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    title: 'Toggle All Rows Expanded',\n  },\n]\n\nconst defaultGetToggleRowExpandedProps = (props, { row }) => [\n  props,\n  {\n    onClick: () => {\n      row.toggleRowExpanded()\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    title: 'Toggle Row Expanded',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      expanded: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetExpanded) {\n    return {\n      ...state,\n      expanded: instance.initialState.expanded || {},\n    }\n  }\n\n  if (action.type === actions.toggleAllRowsExpanded) {\n    const { value } = action\n    const { isAllRowsExpanded, rowsById } = instance\n\n    const expandAll = typeof value !== 'undefined' ? value : !isAllRowsExpanded\n\n    if (expandAll) {\n      const expanded = {}\n\n      Object.keys(rowsById).forEach(rowId => {\n        expanded[rowId] = true\n      })\n\n      return {\n        ...state,\n        expanded,\n      }\n    }\n\n    return {\n      ...state,\n      expanded: {},\n    }\n  }\n\n  if (action.type === actions.toggleRowExpanded) {\n    const { id, value: setExpanded } = action\n    const exists = state.expanded[id]\n\n    const shouldExist =\n      typeof setExpanded !== 'undefined' ? setExpanded : !exists\n\n    if (!exists && shouldExist) {\n      return {\n        ...state,\n        expanded: {\n          ...state.expanded,\n          [id]: true,\n        },\n      }\n    } else if (exists && !shouldExist) {\n      const { [id]: _, ...rest } = state.expanded\n      return {\n        ...state,\n        expanded: rest,\n      }\n    } else {\n      return state\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    rowsById,\n    manualExpandedKey = 'expanded',\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    autoResetExpanded = true,\n    getHooks,\n    plugins,\n    state: { expanded },\n    dispatch,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useSortBy', 'useGroupBy', 'usePivotColumns', 'useGlobalFilter'],\n    'useExpanded'\n  )\n\n  const getAutoResetExpanded = useGetLatest(autoResetExpanded)\n\n  let isAllRowsExpanded = Boolean(\n    Object.keys(rowsById).length && Object.keys(expanded).length\n  )\n\n  if (isAllRowsExpanded) {\n    if (Object.keys(rowsById).some(id => !expanded[id])) {\n      isAllRowsExpanded = false\n    }\n  }\n\n  // Bypass any effects from firing when this changes\n  useMountedLayoutEffect(() => {\n    if (getAutoResetExpanded()) {\n      dispatch({ type: actions.resetExpanded })\n    }\n  }, [dispatch, data])\n\n  const toggleRowExpanded = React.useCallback(\n    (id, value) => {\n      dispatch({ type: actions.toggleRowExpanded, id, value })\n    },\n    [dispatch]\n  )\n\n  const toggleAllRowsExpanded = React.useCallback(\n    value => dispatch({ type: actions.toggleAllRowsExpanded, value }),\n    [dispatch]\n  )\n\n  const expandedRows = React.useMemo(() => {\n    if (paginateExpandedRows) {\n      return expandRows(rows, { manualExpandedKey, expanded, expandSubRows })\n    }\n\n    return rows\n  }, [paginateExpandedRows, rows, manualExpandedKey, expanded, expandSubRows])\n\n  const expandedDepth = React.useMemo(() => findExpandedDepth(expanded), [\n    expanded,\n  ])\n\n  const getInstance = useGetLatest(instance)\n\n  const getToggleAllRowsExpandedProps = makePropGetter(\n    getHooks().getToggleAllRowsExpandedProps,\n    { instance: getInstance() }\n  )\n\n  Object.assign(instance, {\n    preExpandedRows: rows,\n    expandedRows,\n    rows: expandedRows,\n    expandedDepth,\n    isAllRowsExpanded,\n    toggleRowExpanded,\n    toggleAllRowsExpanded,\n    getToggleAllRowsExpandedProps,\n  })\n}\n\nfunction prepareRow(row, { instance: { getHooks }, instance }) {\n  row.toggleRowExpanded = set => instance.toggleRowExpanded(row.id, set)\n\n  row.getToggleRowExpandedProps = makePropGetter(\n    getHooks().getToggleRowExpandedProps,\n    {\n      instance,\n      row,\n    }\n  )\n}\n\nfunction findExpandedDepth(expanded) {\n  let maxDepth = 0\n\n  Object.keys(expanded).forEach(id => {\n    const splitId = id.split('.')\n    maxDepth = Math.max(maxDepth, splitId.length)\n  })\n\n  return maxDepth\n}\n","export const text = (rows, ids, filterValue) => {\n  rows = rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return String(rowValue)\n        .toLowerCase()\n        .includes(String(filterValue).toLowerCase())\n    })\n  })\n  return rows\n}\n\ntext.autoRemove = val => !val\n\nexport const exactText = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue).toLowerCase() === String(filterValue).toLowerCase()\n        : true\n    })\n  })\n}\n\nexactText.autoRemove = val => !val\n\nexport const exactTextCase = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue) === String(filterValue)\n        : true\n    })\n  })\n}\n\nexactTextCase.autoRemove = val => !val\n\nexport const includes = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue.includes(filterValue)\n    })\n  })\n}\n\nincludes.autoRemove = val => !val || !val.length\n\nexport const includesAll = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return (\n        rowValue &&\n        rowValue.length &&\n        filterValue.every(val => rowValue.includes(val))\n      )\n    })\n  })\n}\n\nincludesAll.autoRemove = val => !val || !val.length\n\nexport const includesSome = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return (\n        rowValue &&\n        rowValue.length &&\n        filterValue.some(val => rowValue.includes(val))\n      )\n    })\n  })\n}\n\nincludesSome.autoRemove = val => !val || !val.length\n\nexport const includesValue = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return filterValue.includes(rowValue)\n    })\n  })\n}\n\nincludesValue.autoRemove = val => !val || !val.length\n\nexport const exact = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue === filterValue\n    })\n  })\n}\n\nexact.autoRemove = val => typeof val === 'undefined'\n\nexport const equals = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      // eslint-disable-next-line eqeqeq\n      return rowValue == filterValue\n    })\n  })\n}\n\nequals.autoRemove = val => val == null\n\nexport const between = (rows, ids, filterValue) => {\n  let [min, max] = filterValue || []\n\n  min = typeof min === 'number' ? min : -Infinity\n  max = typeof max === 'number' ? max : Infinity\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue >= min && rowValue <= max\n    })\n  })\n}\n\nbetween.autoRemove = val =>\n  !val || (typeof val[0] !== 'number' && typeof val[1] !== 'number')\n","import React from 'react'\n\nimport {\n  getFirstDefined,\n  getFilterMethod,\n  shouldAutoRemoveFilter,\n} from '../utils'\n\nimport {\n  actions,\n  useGetLatest,\n  functionalUpdate,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport * as filterTypes from '../filterTypes'\n\n// Actions\nactions.resetFilters = 'resetFilters'\nactions.setFilter = 'setFilter'\nactions.setAllFilters = 'setAllFilters'\n\nexport const useFilters = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseFilters.pluginName = 'useFilters'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      filters: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetFilters) {\n    return {\n      ...state,\n      filters: instance.initialState.filters || [],\n    }\n  }\n\n  if (action.type === actions.setFilter) {\n    const { columnId, filterValue } = action\n    const { allColumns, filterTypes: userFilterTypes } = instance\n\n    const column = allColumns.find(d => d.id === columnId)\n\n    if (!column) {\n      throw new Error(\n        `React-Table: Could not find a column with id: ${columnId}`\n      )\n    }\n\n    const filterMethod = getFilterMethod(\n      column.filter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    const previousfilter = state.filters.find(d => d.id === columnId)\n\n    const newFilter = functionalUpdate(\n      filterValue,\n      previousfilter && previousfilter.value\n    )\n\n    //\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter, column)) {\n      return {\n        ...state,\n        filters: state.filters.filter(d => d.id !== columnId),\n      }\n    }\n\n    if (previousfilter) {\n      return {\n        ...state,\n        filters: state.filters.map(d => {\n          if (d.id === columnId) {\n            return { id: columnId, value: newFilter }\n          }\n          return d\n        }),\n      }\n    }\n\n    return {\n      ...state,\n      filters: [...state.filters, { id: columnId, value: newFilter }],\n    }\n  }\n\n  if (action.type === actions.setAllFilters) {\n    const { filters } = action\n    const { allColumns, filterTypes: userFilterTypes } = instance\n\n    return {\n      ...state,\n      // Filter out undefined values\n      filters: functionalUpdate(filters, state.filters).filter(filter => {\n        const column = allColumns.find(d => d.id === filter.id)\n        const filterMethod = getFilterMethod(\n          column.filter,\n          userFilterTypes || {},\n          filterTypes\n        )\n\n        if (\n          shouldAutoRemoveFilter(filterMethod.autoRemove, filter.value, column)\n        ) {\n          return false\n        }\n        return true\n      }),\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    filterTypes: userFilterTypes,\n    manualFilters,\n    defaultCanFilter = false,\n    disableFilters,\n    state: { filters },\n    dispatch,\n    autoResetFilters = true,\n  } = instance\n\n  const setFilter = React.useCallback(\n    (columnId, filterValue) => {\n      dispatch({ type: actions.setFilter, columnId, filterValue })\n    },\n    [dispatch]\n  )\n\n  const setAllFilters = React.useCallback(\n    filters => {\n      dispatch({\n        type: actions.setAllFilters,\n        filters,\n      })\n    },\n    [dispatch]\n  )\n\n  allColumns.forEach(column => {\n    const {\n      id,\n      accessor,\n      defaultCanFilter: columnDefaultCanFilter,\n      disableFilters: columnDisableFilters,\n    } = column\n\n    // Determine if a column is filterable\n    column.canFilter = accessor\n      ? getFirstDefined(\n          columnDisableFilters === true ? false : undefined,\n          disableFilters === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(columnDefaultCanFilter, defaultCanFilter, false)\n\n    // Provide the column a way of updating the filter value\n    column.setFilter = val => setFilter(column.id, val)\n\n    // Provide the current filter value to the column for\n    // convenience\n    const found = filters.find(d => d.id === id)\n    column.filterValue = found && found.value\n  })\n\n  const [\n    filteredRows,\n    filteredFlatRows,\n    filteredRowsById,\n  ] = React.useMemo(() => {\n    if (manualFilters || !filters.length) {\n      return [rows, flatRows, rowsById]\n    }\n\n    const filteredFlatRows = []\n    const filteredRowsById = {}\n\n    // Filters top level and nested rows\n    const filterRows = (rows, depth = 0) => {\n      let filteredRows = rows\n\n      filteredRows = filters.reduce(\n        (filteredSoFar, { id: columnId, value: filterValue }) => {\n          // Find the filters column\n          const column = allColumns.find(d => d.id === columnId)\n\n          if (!column) {\n            return filteredSoFar\n          }\n\n          if (depth === 0) {\n            column.preFilteredRows = filteredSoFar\n          }\n\n          const filterMethod = getFilterMethod(\n            column.filter,\n            userFilterTypes || {},\n            filterTypes\n          )\n\n          if (!filterMethod) {\n            console.warn(\n              `Could not find a valid 'column.filter' for column with the ID: ${column.id}.`\n            )\n            return filteredSoFar\n          }\n\n          // Pass the rows, id, filterValue and column to the filterMethod\n          // to get the filtered rows back\n          column.filteredRows = filterMethod(\n            filteredSoFar,\n            [columnId],\n            filterValue\n          )\n\n          return column.filteredRows\n        },\n        rows\n      )\n\n      // Apply the filter to any subRows\n      // We technically could do this recursively in the above loop,\n      // but that would severely hinder the API for the user, since they\n      // would be required to do that recursion in some scenarios\n      filteredRows.forEach(row => {\n        filteredFlatRows.push(row)\n        filteredRowsById[row.id] = row\n        if (!row.subRows) {\n          return\n        }\n\n        row.subRows =\n          row.subRows && row.subRows.length > 0\n            ? filterRows(row.subRows, depth + 1)\n            : row.subRows\n      })\n\n      return filteredRows\n    }\n\n    return [filterRows(rows), filteredFlatRows, filteredRowsById]\n  }, [\n    manualFilters,\n    filters,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    userFilterTypes,\n  ])\n\n  React.useMemo(() => {\n    // Now that each filtered column has it's partially filtered rows,\n    // lets assign the final filtered rows to all of the other columns\n    const nonFilteredColumns = allColumns.filter(\n      column => !filters.find(d => d.id === column.id)\n    )\n\n    // This essentially enables faceted filter options to be built easily\n    // using every column's preFilteredRows value\n    nonFilteredColumns.forEach(column => {\n      column.preFilteredRows = filteredRows\n      column.filteredRows = filteredRows\n    })\n  }, [filteredRows, filters, allColumns])\n\n  const getAutoResetFilters = useGetLatest(autoResetFilters)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetFilters()) {\n      dispatch({ type: actions.resetFilters })\n    }\n  }, [dispatch, manualFilters ? null : data])\n\n  Object.assign(instance, {\n    preFilteredRows: rows,\n    preFilteredFlatRows: flatRows,\n    preFilteredRowsById: rowsById,\n    filteredRows,\n    filteredFlatRows,\n    filteredRowsById,\n    rows: filteredRows,\n    flatRows: filteredFlatRows,\n    rowsById: filteredRowsById,\n    setFilter,\n    setAllFilters,\n  })\n}\n","import React from 'react'\n\nimport {\n  getFilterMethod,\n  shouldAutoRemoveFilter,\n  getFirstDefined,\n} from '../utils'\n\nimport {\n  actions,\n  useMountedLayoutEffect,\n  functionalUpdate,\n  useGetLatest,\n} from '../publicUtils'\n\nimport * as filterTypes from '../filterTypes'\n\n// Actions\nactions.resetGlobalFilter = 'resetGlobalFilter'\nactions.setGlobalFilter = 'setGlobalFilter'\n\nexport const useGlobalFilter = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseGlobalFilter.pluginName = 'useGlobalFilter'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.resetGlobalFilter) {\n    return {\n      ...state,\n      globalFilter: instance.initialState.globalFilter || undefined,\n    }\n  }\n\n  if (action.type === actions.setGlobalFilter) {\n    const { filterValue } = action\n    const { userFilterTypes } = instance\n\n    const filterMethod = getFilterMethod(\n      instance.globalFilter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    const newFilter = functionalUpdate(filterValue, state.globalFilter)\n\n    //\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter)) {\n      const { globalFilter, ...stateWithoutGlobalFilter } = state\n      return stateWithoutGlobalFilter\n    }\n\n    return {\n      ...state,\n      globalFilter: newFilter,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    filterTypes: userFilterTypes,\n    globalFilter,\n    manualGlobalFilter,\n    state: { globalFilter: globalFilterValue },\n    dispatch,\n    autoResetGlobalFilter = true,\n    disableGlobalFilter,\n  } = instance\n\n  const setGlobalFilter = React.useCallback(\n    filterValue => {\n      dispatch({ type: actions.setGlobalFilter, filterValue })\n    },\n    [dispatch]\n  )\n\n  // TODO: Create a filter cache for incremental high speed multi-filtering\n  // This gets pretty complicated pretty fast, since you have to maintain a\n  // cache for each row group (top-level rows, and each row's recursive subrows)\n  // This would make multi-filtering a lot faster though. Too far?\n\n  const [\n    globalFilteredRows,\n    globalFilteredFlatRows,\n    globalFilteredRowsById,\n  ] = React.useMemo(() => {\n    if (manualGlobalFilter || typeof globalFilterValue === 'undefined') {\n      return [rows, flatRows, rowsById]\n    }\n\n    const filteredFlatRows = []\n    const filteredRowsById = {}\n\n    const filterMethod = getFilterMethod(\n      globalFilter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    if (!filterMethod) {\n      console.warn(`Could not find a valid 'globalFilter' option.`)\n      return rows\n    }\n\n    allColumns.forEach(column => {\n      const { disableGlobalFilter: columnDisableGlobalFilter } = column\n\n      column.canFilter = getFirstDefined(\n        columnDisableGlobalFilter === true ? false : undefined,\n        disableGlobalFilter === true ? false : undefined,\n        true\n      )\n    })\n\n    const filterableColumns = allColumns.filter(c => c.canFilter === true)\n\n    // Filters top level and nested rows\n    const filterRows = filteredRows => {\n      filteredRows = filterMethod(\n        filteredRows,\n        filterableColumns.map(d => d.id),\n        globalFilterValue\n      )\n\n      filteredRows.forEach(row => {\n        filteredFlatRows.push(row)\n        filteredRowsById[row.id] = row\n\n        row.subRows =\n          row.subRows && row.subRows.length\n            ? filterRows(row.subRows)\n            : row.subRows\n      })\n\n      return filteredRows\n    }\n\n    return [filterRows(rows), filteredFlatRows, filteredRowsById]\n  }, [\n    manualGlobalFilter,\n    globalFilterValue,\n    globalFilter,\n    userFilterTypes,\n    allColumns,\n    rows,\n    flatRows,\n    rowsById,\n    disableGlobalFilter,\n  ])\n\n  const getAutoResetGlobalFilter = useGetLatest(autoResetGlobalFilter)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetGlobalFilter()) {\n      dispatch({ type: actions.resetGlobalFilter })\n    }\n  }, [dispatch, manualGlobalFilter ? null : data])\n\n  Object.assign(instance, {\n    preGlobalFilteredRows: rows,\n    preGlobalFilteredFlatRows: flatRows,\n    preGlobalFilteredRowsById: rowsById,\n    globalFilteredRows,\n    globalFilteredFlatRows,\n    globalFilteredRowsById,\n    rows: globalFilteredRows,\n    flatRows: globalFilteredFlatRows,\n    rowsById: globalFilteredRowsById,\n    setGlobalFilter,\n    disableGlobalFilter,\n  })\n}\n","export function sum(values, aggregatedValues) {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return aggregatedValues.reduce(\n    (sum, next) => sum + (typeof next === 'number' ? next : 0),\n    0\n  )\n}\n\nexport function min(values) {\n  let min = 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n    }\n  })\n\n  return min\n}\n\nexport function max(values) {\n  let max = 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      max = Math.max(max, value)\n    }\n  })\n\n  return max\n}\n\nexport function minMax(values) {\n  let min = 0\n  let max = 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return `${min}..${max}`\n}\n\nexport function average(values) {\n  return sum(null, values) / values.length\n}\n\nexport function median(values) {\n  if (!values.length) {\n    return null\n  }\n\n  let min = 0\n  let max = 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return (min + max) / 2\n}\n\nexport function unique(values) {\n  return Array.from(new Set(values).values())\n}\n\nexport function uniqueCount(values) {\n  return new Set(values).size\n}\n\nexport function count(values) {\n  return values.length\n}\n","import React from 'react'\n\nimport * as aggregations from '../aggregations'\n\nimport { getFirstDefined, flattenBy } from '../utils'\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nconst emptyArray = []\nconst emptyObject = {}\n\n// Actions\nactions.resetGroupBy = 'resetGroupBy'\nactions.toggleGroupBy = 'toggleGroupBy'\n\nexport const useGroupBy = hooks => {\n  hooks.getGroupByToggleProps = [defaultGetGroupByToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.visibleColumnsDeps.push((deps, { instance }) => [\n    ...deps,\n    instance.state.groupBy,\n  ])\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseGroupBy.pluginName = 'useGroupBy'\n\nconst defaultGetGroupByToggleProps = (props, { header }) => [\n  props,\n  {\n    onClick: header.canGroupBy\n      ? e => {\n          e.persist()\n          header.toggleGroupBy()\n        }\n      : undefined,\n    style: {\n      cursor: header.canGroupBy ? 'pointer' : undefined,\n    },\n    title: 'Toggle GroupBy',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      groupBy: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetGroupBy) {\n    return {\n      ...state,\n      groupBy: instance.initialState.groupBy || [],\n    }\n  }\n\n  if (action.type === actions.toggleGroupBy) {\n    const { columnId, value: setGroupBy } = action\n\n    const resolvedGroupBy =\n      typeof setGroupBy !== 'undefined'\n        ? setGroupBy\n        : !state.groupBy.includes(columnId)\n\n    if (resolvedGroupBy) {\n      return {\n        ...state,\n        groupBy: [...state.groupBy, columnId],\n      }\n    }\n\n    return {\n      ...state,\n      groupBy: state.groupBy.filter(d => d !== columnId),\n    }\n  }\n}\n\nfunction visibleColumns(\n  columns,\n  {\n    instance: {\n      state: { groupBy },\n    },\n  }\n) {\n  // Sort grouped columns to the start of the column list\n  // before the headers are built\n\n  const groupByColumns = groupBy\n    .map(g => columns.find(col => col.id === g))\n    .filter(Boolean)\n\n  const nonGroupByColumns = columns.filter(col => !groupBy.includes(col.id))\n\n  columns = [...groupByColumns, ...nonGroupByColumns]\n\n  columns.forEach(column => {\n    column.isGrouped = groupBy.includes(column.id)\n    column.groupedIndex = groupBy.indexOf(column.id)\n  })\n\n  return columns\n}\n\nconst defaultUserAggregations = {}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    flatHeaders,\n    groupByFn = defaultGroupByFn,\n    manualGroupBy,\n    aggregations: userAggregations = defaultUserAggregations,\n    plugins,\n    state: { groupBy },\n    dispatch,\n    autoResetGroupBy = true,\n    disableGroupBy,\n    defaultCanGroupBy,\n    getHooks,\n  } = instance\n\n  ensurePluginOrder(plugins, ['useFilters'], 'useGroupBy')\n\n  const getInstance = useGetLatest(instance)\n\n  allColumns.forEach(column => {\n    const {\n      accessor,\n      defaultGroupBy: defaultColumnGroupBy,\n      disableGroupBy: columnDisableGroupBy,\n    } = column\n\n    column.canGroupBy = accessor\n      ? getFirstDefined(\n          column.canGroupBy,\n          columnDisableGroupBy === true ? false : undefined,\n          disableGroupBy === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(\n          column.canGroupBy,\n          defaultColumnGroupBy,\n          defaultCanGroupBy,\n          false\n        )\n\n    if (column.canGroupBy) {\n      column.toggleGroupBy = () => instance.toggleGroupBy(column.id)\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell\n  })\n\n  const toggleGroupBy = React.useCallback(\n    (columnId, value) => {\n      dispatch({ type: actions.toggleGroupBy, columnId, value })\n    },\n    [dispatch]\n  )\n\n  flatHeaders.forEach(header => {\n    header.getGroupByToggleProps = makePropGetter(\n      getHooks().getGroupByToggleProps,\n      { instance: getInstance(), header }\n    )\n  })\n\n  const [\n    groupedRows,\n    groupedFlatRows,\n    groupedRowsById,\n    onlyGroupedFlatRows,\n    onlyGroupedRowsById,\n    nonGroupedFlatRows,\n    nonGroupedRowsById,\n  ] = React.useMemo(() => {\n    if (manualGroupBy || !groupBy.length) {\n      return [\n        rows,\n        flatRows,\n        rowsById,\n        emptyArray,\n        emptyObject,\n        flatRows,\n        rowsById,\n      ]\n    }\n\n    // Ensure that the list of filtered columns exist\n    const existingGroupBy = groupBy.filter(g =>\n      allColumns.find(col => col.id === g)\n    )\n\n    // Find the columns that can or are aggregating\n    // Uses each column to aggregate rows into a single value\n    const aggregateRowsToValues = (leafRows, groupedRows, depth) => {\n      const values = {}\n\n      allColumns.forEach(column => {\n        // Don't aggregate columns that are in the groupBy\n        if (existingGroupBy.includes(column.id)) {\n          values[column.id] = groupedRows[0]\n            ? groupedRows[0].values[column.id]\n            : null\n          return\n        }\n\n        // Get the columnValues to aggregate\n        const groupedValues = groupedRows.map(row => row.values[column.id])\n\n        // Get the columnValues to aggregate\n        const leafValues = leafRows.map(row => {\n          let columnValue = row.values[column.id]\n\n          if (!depth && column.aggregateValue) {\n            const aggregateValueFn =\n              typeof column.aggregateValue === 'function'\n                ? column.aggregateValue\n                : userAggregations[column.aggregateValue] ||\n                  aggregations[column.aggregateValue]\n\n            if (!aggregateValueFn) {\n              console.info({ column })\n              throw new Error(\n                `React Table: Invalid column.aggregateValue option for column listed above`\n              )\n            }\n\n            columnValue = aggregateValueFn(columnValue, row, column)\n          }\n          return columnValue\n        })\n\n        // Aggregate the values\n        let aggregateFn =\n          typeof column.aggregate === 'function'\n            ? column.aggregate\n            : userAggregations[column.aggregate] ||\n              aggregations[column.aggregate]\n\n        if (aggregateFn) {\n          values[column.id] = aggregateFn(leafValues, groupedValues)\n        } else if (column.aggregate) {\n          console.info({ column })\n          throw new Error(\n            `React Table: Invalid column.aggregate option for column listed above`\n          )\n        } else {\n          values[column.id] = null\n        }\n      })\n\n      return values\n    }\n\n    let groupedFlatRows = []\n    const groupedRowsById = {}\n    const onlyGroupedFlatRows = []\n    const onlyGroupedRowsById = {}\n    const nonGroupedFlatRows = []\n    const nonGroupedRowsById = {}\n\n    // Recursively group the data\n    const groupUpRecursively = (rows, depth = 0, parentId) => {\n      // This is the last level, just return the rows\n      if (depth === existingGroupBy.length) {\n        return rows\n      }\n\n      const columnId = existingGroupBy[depth]\n\n      // Group the rows together for this level\n      let rowGroupsMap = groupByFn(rows, columnId)\n\n      // Peform aggregations for each group\n      const aggregatedGroupedRows = Object.entries(rowGroupsMap).map(\n        ([groupByVal, groupedRows], index) => {\n          let id = `${columnId}:${groupByVal}`\n          id = parentId ? `${parentId}>${id}` : id\n\n          // First, Recurse to group sub rows before aggregation\n          const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n          // Flatten the leaf rows of the rows in this group\n          const leafRows = depth\n            ? flattenBy(groupedRows, 'leafRows')\n            : groupedRows\n\n          const values = aggregateRowsToValues(leafRows, groupedRows, depth)\n\n          const row = {\n            id,\n            isGrouped: true,\n            groupByID: columnId,\n            groupByVal,\n            values,\n            subRows,\n            leafRows,\n            depth,\n            index,\n          }\n\n          subRows.forEach(subRow => {\n            groupedFlatRows.push(subRow)\n            groupedRowsById[subRow.id] = subRow\n            if (subRow.isGrouped) {\n              onlyGroupedFlatRows.push(subRow)\n              onlyGroupedRowsById[subRow.id] = subRow\n            } else {\n              nonGroupedFlatRows.push(subRow)\n              nonGroupedRowsById[subRow.id] = subRow\n            }\n          })\n\n          return row\n        }\n      )\n\n      return aggregatedGroupedRows\n    }\n\n    const groupedRows = groupUpRecursively(rows)\n\n    groupedRows.forEach(subRow => {\n      groupedFlatRows.push(subRow)\n      groupedRowsById[subRow.id] = subRow\n      if (subRow.isGrouped) {\n        onlyGroupedFlatRows.push(subRow)\n        onlyGroupedRowsById[subRow.id] = subRow\n      } else {\n        nonGroupedFlatRows.push(subRow)\n        nonGroupedRowsById[subRow.id] = subRow\n      }\n    })\n\n    // Assign the new data\n    return [\n      groupedRows,\n      groupedFlatRows,\n      groupedRowsById,\n      onlyGroupedFlatRows,\n      onlyGroupedRowsById,\n      nonGroupedFlatRows,\n      nonGroupedRowsById,\n    ]\n  }, [\n    manualGroupBy,\n    groupBy,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    userAggregations,\n    groupByFn,\n  ])\n\n  const getAutoResetGroupBy = useGetLatest(autoResetGroupBy)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetGroupBy()) {\n      dispatch({ type: actions.resetGroupBy })\n    }\n  }, [dispatch, manualGroupBy ? null : data])\n\n  Object.assign(instance, {\n    preGroupedRows: rows,\n    preGroupedFlatRow: flatRows,\n    preGroupedRowsById: rowsById,\n    groupedRows,\n    groupedFlatRows,\n    groupedRowsById,\n    onlyGroupedFlatRows,\n    onlyGroupedRowsById,\n    nonGroupedFlatRows,\n    nonGroupedRowsById,\n    rows: groupedRows,\n    flatRows: groupedFlatRows,\n    rowsById: groupedRowsById,\n    toggleGroupBy,\n  })\n}\n\nfunction prepareRow(row) {\n  row.allCells.forEach(cell => {\n    // Grouped cells are in the groupBy and the pivot cell for the row\n    cell.isGrouped = cell.column.isGrouped && cell.column.id === row.groupByID\n    // Placeholder cells are any columns in the groupBy that are not grouped\n    cell.isPlaceholder = !cell.isGrouped && cell.column.isGrouped\n    // Aggregated cells are not grouped, not repeated, but still have subRows\n    cell.isAggregated = !cell.isGrouped && !cell.isPlaceholder && row.canExpand\n  })\n}\n\nexport function defaultGroupByFn(rows, columnId) {\n  return rows.reduce((prev, row, i) => {\n    // TODO: Might want to implement a key serializer here so\n    // irregular column values can still be grouped if needed?\n    const resKey = `${row.values[columnId]}`\n    prev[resKey] = Array.isArray(prev[resKey]) ? prev[resKey] : []\n    prev[resKey].push(row)\n    return prev\n  }, {})\n}\n","const reSplitAlphaNumeric = /([0-9]+)/gm\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nexport const alphanumeric = (rowA, rowB, columnId) => {\n  let a = getRowValueByColumnID(rowA, columnId)\n  let b = getRowValueByColumnID(rowB, columnId)\n  // Force to strings (or \"\" for unsupported types)\n  a = toString(a)\n  b = toString(b)\n\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  a = a.split(reSplitAlphaNumeric).filter(Boolean)\n  b = b.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    let aa = a.shift()\n    let bb = b.shift()\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0])) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1])) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\nexport function datetime(rowA, rowB, columnId) {\n  let a = getRowValueByColumnID(rowA, columnId)\n  let b = getRowValueByColumnID(rowB, columnId)\n\n  a = a.getTime()\n  b = b.getTime()\n\n  return compareBasic(a, b)\n}\n\nexport function basic(rowA, rowB, columnId) {\n  let a = getRowValueByColumnID(rowA, columnId)\n  let b = getRowValueByColumnID(rowB, columnId)\n\n  return compareBasic(a, b)\n}\n\n// Utils\n\nfunction compareBasic(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction getRowValueByColumnID(row, columnId) {\n  return row.values[columnId]\n}\n\nfunction toString(a) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n","import React from 'react'\n\nimport {\n  actions,\n  ensurePluginOrder,\n  defaultColumn,\n  makePropGetter,\n  useGetLatest,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport { getFirstDefined, isFunction } from '../utils'\n\nimport * as sortTypes from '../sortTypes'\n\n// Actions\nactions.resetSortBy = 'resetSortBy'\nactions.toggleSortBy = 'toggleSortBy'\nactions.clearSortBy = 'clearSortBy'\n\ndefaultColumn.sortType = 'alphanumeric'\ndefaultColumn.sortDescFirst = false\n\nexport const useSortBy = hooks => {\n  hooks.getSortByToggleProps = [defaultGetSortByToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseSortBy.pluginName = 'useSortBy'\n\nconst defaultGetSortByToggleProps = (props, { instance, column }) => {\n  const { isMultiSortEvent = e => e.shiftKey } = instance\n\n  return [\n    props,\n    {\n      onClick: column.canSort\n        ? e => {\n            e.persist()\n            column.toggleSortBy(\n              undefined,\n              !instance.disableMultiSort && isMultiSortEvent(e)\n            )\n          }\n        : undefined,\n      style: {\n        cursor: column.canSort ? 'pointer' : undefined,\n      },\n      title: column.canSort ? 'Toggle SortBy' : undefined,\n    },\n  ]\n}\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      sortBy: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetSortBy) {\n    return {\n      ...state,\n      sortBy: instance.initialState.sortBy || [],\n    }\n  }\n\n  if (action.type === actions.clearSortBy) {\n    const { sortBy } = state\n    const newSortBy = sortBy.filter(d => d.id !== action.columnId)\n\n    return {\n      ...state,\n      sortBy: newSortBy,\n    }\n  }\n\n  if (action.type === actions.toggleSortBy) {\n    const { columnId, desc, multi } = action\n\n    const {\n      allColumns,\n      disableMultiSort,\n      disableSortRemove,\n      disableMultiRemove,\n      maxMultiSortColCount = Number.MAX_SAFE_INTEGER,\n    } = instance\n\n    const { sortBy } = state\n\n    // Find the column for this columnId\n    const column = allColumns.find(d => d.id === columnId)\n    const { sortDescFirst } = column\n\n    // Find any existing sortBy for this column\n    const existingSortBy = sortBy.find(d => d.id === columnId)\n    const existingIndex = sortBy.findIndex(d => d.id === columnId)\n    const hasDescDefined = typeof desc !== 'undefined' && desc !== null\n\n    let newSortBy = []\n\n    // What should we do with this sort action?\n    let sortAction\n\n    if (!disableMultiSort && multi) {\n      if (existingSortBy) {\n        sortAction = 'toggle'\n      } else {\n        sortAction = 'add'\n      }\n    } else {\n      // Normal mode\n      if (existingIndex !== sortBy.length - 1) {\n        sortAction = 'replace'\n      } else if (existingSortBy) {\n        sortAction = 'toggle'\n      } else {\n        sortAction = 'replace'\n      }\n    }\n\n    // Handle toggle states that will remove the sortBy\n    if (\n      sortAction === 'toggle' && // Must be toggling\n      !disableSortRemove && // If disableSortRemove, disable in general\n      !hasDescDefined && // Must not be setting desc\n      (multi ? !disableMultiRemove : true) && // If multi, don't allow if disableMultiRemove\n      ((existingSortBy && // Finally, detect if it should indeed be removed\n        existingSortBy.desc &&\n        !sortDescFirst) ||\n        (!existingSortBy.desc && sortDescFirst))\n    ) {\n      sortAction = 'remove'\n    }\n\n    if (sortAction === 'replace') {\n      newSortBy = [\n        {\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst,\n        },\n      ]\n    } else if (sortAction === 'add') {\n      newSortBy = [\n        ...sortBy,\n        {\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst,\n        },\n      ]\n      // Take latest n columns\n      newSortBy.splice(0, newSortBy.length - maxMultiSortColCount)\n    } else if (sortAction === 'toggle') {\n      // This flips (or sets) the\n      newSortBy = sortBy.map(d => {\n        if (d.id === columnId) {\n          return {\n            ...d,\n            desc: hasDescDefined ? desc : !existingSortBy.desc,\n          }\n        }\n        return d\n      })\n    } else if (sortAction === 'remove') {\n      newSortBy = sortBy.filter(d => d.id !== columnId)\n    }\n\n    return {\n      ...state,\n      sortBy: newSortBy,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    allColumns,\n    orderByFn = defaultOrderByFn,\n    sortTypes: userSortTypes,\n    manualSortBy,\n    defaultCanSort,\n    disableSortBy,\n    flatHeaders,\n    state: { sortBy },\n    dispatch,\n    plugins,\n    getHooks,\n    autoResetSortBy = true,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useFilters', 'useGlobalFilter', 'useGroupBy', 'usePivotColumns'],\n    'useSortBy'\n  )\n\n  // Updates sorting based on a columnId, desc flag and multi flag\n  const toggleSortBy = React.useCallback(\n    (columnId, desc, multi) => {\n      dispatch({ type: actions.toggleSortBy, columnId, desc, multi })\n    },\n    [dispatch]\n  )\n\n  // use reference to avoid memory leak in #1608\n  const getInstance = useGetLatest(instance)\n\n  // Add the getSortByToggleProps method to columns and headers\n  flatHeaders.forEach(column => {\n    const {\n      accessor,\n      canSort: defaultColumnCanSort,\n      disableSortBy: columnDisableSortBy,\n      id,\n    } = column\n\n    const canSort = accessor\n      ? getFirstDefined(\n          columnDisableSortBy === true ? false : undefined,\n          disableSortBy === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(defaultCanSort, defaultColumnCanSort, false)\n\n    column.canSort = canSort\n\n    if (column.canSort) {\n      column.toggleSortBy = (desc, multi) =>\n        toggleSortBy(column.id, desc, multi)\n\n      column.clearSortBy = () => {\n        dispatch({ type: actions.clearSortBy, columnId: column.id })\n      }\n    }\n\n    column.getSortByToggleProps = makePropGetter(\n      getHooks().getSortByToggleProps,\n      {\n        instance: getInstance(),\n        column,\n      }\n    )\n\n    const columnSort = sortBy.find(d => d.id === id)\n    column.isSorted = !!columnSort\n    column.sortedIndex = sortBy.findIndex(d => d.id === id)\n    column.isSortedDesc = column.isSorted ? columnSort.desc : undefined\n  })\n\n  const [sortedRows, sortedFlatRows] = React.useMemo(() => {\n    if (manualSortBy || !sortBy.length) {\n      return [rows, flatRows]\n    }\n\n    const sortedFlatRows = []\n\n    // Filter out sortBys that correspond to non existing columns\n    const availableSortBy = sortBy.filter(sort =>\n      allColumns.find(col => col.id === sort.id)\n    )\n\n    const sortData = rows => {\n      // Use the orderByFn to compose multiple sortBy's together.\n      // This will also perform a stable sorting using the row index\n      // if needed.\n      const sortedData = orderByFn(\n        rows,\n        availableSortBy.map(sort => {\n          // Support custom sorting methods for each column\n          const column = allColumns.find(d => d.id === sort.id)\n\n          if (!column) {\n            throw new Error(\n              `React-Table: Could not find a column with id: ${sort.id} while sorting`\n            )\n          }\n\n          const { sortType } = column\n\n          // Look up sortBy functions in this order:\n          // column function\n          // column string lookup on user sortType\n          // column string lookup on built-in sortType\n          // default function\n          // default string lookup on user sortType\n          // default string lookup on built-in sortType\n          const sortMethod =\n            isFunction(sortType) ||\n            (userSortTypes || {})[sortType] ||\n            sortTypes[sortType]\n\n          if (!sortMethod) {\n            throw new Error(\n              `React-Table: Could not find a valid sortType of '${sortType}' for column '${sort.id}'.`\n            )\n          }\n\n          // Return the correct sortFn.\n          // This function should always return in ascending order\n          return (a, b) => sortMethod(a, b, sort.id, sort.desc)\n        }),\n        // Map the directions\n        availableSortBy.map(sort => {\n          // Detect and use the sortInverted option\n          const column = allColumns.find(d => d.id === sort.id)\n\n          if (column && column.sortInverted) {\n            return sort.desc\n          }\n\n          return !sort.desc\n        })\n      )\n\n      // If there are sub-rows, sort them\n      sortedData.forEach(row => {\n        sortedFlatRows.push(row)\n        if (!row.subRows || row.subRows.length <= 1) {\n          return\n        }\n        row.subRows = sortData(row.subRows)\n      })\n\n      return sortedData\n    }\n\n    return [sortData(rows), sortedFlatRows]\n  }, [\n    manualSortBy,\n    sortBy,\n    rows,\n    flatRows,\n    allColumns,\n    orderByFn,\n    userSortTypes,\n  ])\n\n  const getAutoResetSortBy = useGetLatest(autoResetSortBy)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetSortBy()) {\n      dispatch({ type: actions.resetSortBy })\n    }\n  }, [manualSortBy ? null : data])\n\n  Object.assign(instance, {\n    preSortedRows: rows,\n    preSortedFlatRows: flatRows,\n    sortedRows,\n    sortedFlatRows,\n    rows: sortedRows,\n    flatRows: sortedFlatRows,\n    toggleSortBy,\n  })\n}\n\nexport function defaultOrderByFn(arr, funcs, dirs) {\n  return [...arr].sort((rowA, rowB) => {\n    for (let i = 0; i < funcs.length; i += 1) {\n      const sortFn = funcs[i]\n      const desc = dirs[i] === false || dirs[i] === 'desc'\n      const sortInt = sortFn(rowA, rowB)\n      if (sortInt !== 0) {\n        return desc ? -sortInt : sortInt\n      }\n    }\n    return dirs[0] ? rowA.index - rowB.index : rowB.index - rowA.index\n  })\n}\n","import React from 'react'\n\n//\n\nimport {\n  actions,\n  ensurePluginOrder,\n  functionalUpdate,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nimport { expandRows } from '../utils'\n\nconst pluginName = 'usePagination'\n\n// Actions\nactions.resetPage = 'resetPage'\nactions.gotoPage = 'gotoPage'\nactions.setPageSize = 'setPageSize'\n\nexport const usePagination = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nusePagination.pluginName = pluginName\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      pageSize: 10,\n      pageIndex: 0,\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetPage) {\n    return {\n      ...state,\n      pageIndex: instance.initialState.pageIndex || 0,\n    }\n  }\n\n  if (action.type === actions.gotoPage) {\n    const { pageCount, page } = instance\n    const newPageIndex = functionalUpdate(action.pageIndex, state.pageIndex)\n    let canNavigate = false\n\n    if (newPageIndex > state.pageIndex) {\n      // next page\n      canNavigate =\n        pageCount === -1\n          ? page.length >= state.pageSize\n          : newPageIndex < pageCount\n    } else if (newPageIndex < state.pageIndex) {\n      // prev page\n      canNavigate = newPageIndex > -1\n    }\n\n    if (!canNavigate) {\n      return state\n    }\n\n    return {\n      ...state,\n      pageIndex: newPageIndex,\n    }\n  }\n\n  if (action.type === actions.setPageSize) {\n    const { pageSize } = action\n    const topRowIndex = state.pageSize * state.pageIndex\n    const pageIndex = Math.floor(topRowIndex / pageSize)\n\n    return {\n      ...state,\n      pageIndex,\n      pageSize,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    rows,\n    autoResetPage = true,\n    manualExpandedKey = 'expanded',\n    plugins,\n    pageCount: userPageCount,\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    state: {\n      pageSize,\n      pageIndex,\n      expanded,\n      globalFilter,\n      filters,\n      groupBy,\n      sortBy,\n    },\n    dispatch,\n    data,\n    manualPagination,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useGlobalFilter', 'useFilters', 'useGroupBy', 'useSortBy', 'useExpanded'],\n    'usePagination'\n  )\n\n  const getAutoResetPage = useGetLatest(autoResetPage)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetPage()) {\n      dispatch({ type: actions.resetPage })\n    }\n  }, [\n    dispatch,\n    manualPagination ? null : data,\n    globalFilter,\n    filters,\n    groupBy,\n    sortBy,\n  ])\n\n  const pageCount = manualPagination\n    ? userPageCount\n    : Math.ceil(rows.length / pageSize)\n\n  const pageOptions = React.useMemo(\n    () =>\n      pageCount > 0\n        ? [...new Array(pageCount)].fill(null).map((d, i) => i)\n        : [],\n    [pageCount]\n  )\n\n  const page = React.useMemo(() => {\n    let page\n\n    if (manualPagination) {\n      page = rows\n    } else {\n      const pageStart = pageSize * pageIndex\n      const pageEnd = pageStart + pageSize\n\n      page = rows.slice(pageStart, pageEnd)\n    }\n\n    if (paginateExpandedRows) {\n      return page\n    }\n\n    return expandRows(page, { manualExpandedKey, expanded, expandSubRows })\n  }, [\n    expandSubRows,\n    expanded,\n    manualExpandedKey,\n    manualPagination,\n    pageIndex,\n    pageSize,\n    paginateExpandedRows,\n    rows,\n  ])\n\n  const canPreviousPage = pageIndex > 0\n  const canNextPage =\n    pageCount === -1 ? page.length >= pageSize : pageIndex < pageCount - 1\n\n  const gotoPage = React.useCallback(\n    pageIndex => {\n      dispatch({ type: actions.gotoPage, pageIndex })\n    },\n    [dispatch]\n  )\n\n  const previousPage = React.useCallback(() => {\n    return gotoPage(old => old - 1)\n  }, [gotoPage])\n\n  const nextPage = React.useCallback(() => {\n    return gotoPage(old => old + 1)\n  }, [gotoPage])\n\n  const setPageSize = React.useCallback(\n    pageSize => {\n      dispatch({ type: actions.setPageSize, pageSize })\n    },\n    [dispatch]\n  )\n\n  Object.assign(instance, {\n    pageOptions,\n    pageCount,\n    page,\n    canPreviousPage,\n    canNextPage,\n    gotoPage,\n    previousPage,\n    nextPage,\n    setPageSize,\n  })\n}\n","/* istanbul ignore file */\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nimport { flattenColumns, getFirstDefined } from '../utils'\n\n// Actions\nactions.resetPivot = 'resetPivot'\nactions.togglePivot = 'togglePivot'\n\nexport const _UNSTABLE_usePivotColumns = hooks => {\n  hooks.getPivotToggleProps = [defaultGetPivotToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstanceAfterData.push(useInstanceAfterData)\n  hooks.allColumns.push(allColumns)\n  hooks.accessValue.push(accessValue)\n  hooks.materializedColumns.push(materializedColumns)\n  hooks.materializedColumnsDeps.push(materializedColumnsDeps)\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.visibleColumnsDeps.push(visibleColumnsDeps)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\n_UNSTABLE_usePivotColumns.pluginName = 'usePivotColumns'\n\nconst defaultPivotColumns = []\n\nconst defaultGetPivotToggleProps = (props, { header }) => [\n  props,\n  {\n    onClick: header.canPivot\n      ? e => {\n          e.persist()\n          header.togglePivot()\n        }\n      : undefined,\n    style: {\n      cursor: header.canPivot ? 'pointer' : undefined,\n    },\n    title: 'Toggle Pivot',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      pivotColumns: defaultPivotColumns,\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetPivot) {\n    return {\n      ...state,\n      pivotColumns: instance.initialState.pivotColumns || defaultPivotColumns,\n    }\n  }\n\n  if (action.type === actions.togglePivot) {\n    const { columnId, value: setPivot } = action\n\n    const resolvedPivot =\n      typeof setPivot !== 'undefined'\n        ? setPivot\n        : !state.pivotColumns.includes(columnId)\n\n    if (resolvedPivot) {\n      return {\n        ...state,\n        pivotColumns: [...state.pivotColumns, columnId],\n      }\n    }\n\n    return {\n      ...state,\n      pivotColumns: state.pivotColumns.filter(d => d !== columnId),\n    }\n  }\n}\n\nfunction useInstanceAfterData(instance) {\n  instance.allColumns.forEach(column => {\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\n  })\n}\n\nfunction allColumns(columns, { instance }) {\n  columns.forEach(column => {\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\n    column.uniqueValues = new Set()\n  })\n  return columns\n}\n\nfunction accessValue(value, { column }) {\n  if (column.uniqueValues && typeof value !== 'undefined') {\n    column.uniqueValues.add(value)\n  }\n  return value\n}\n\nfunction materializedColumns(materialized, { instance }) {\n  const { allColumns, state } = instance\n\n  if (!state.pivotColumns.length || !state.groupBy || !state.groupBy.length) {\n    return materialized\n  }\n\n  const pivotColumns = state.pivotColumns\n    .map(id => allColumns.find(d => d.id === id))\n    .filter(Boolean)\n\n  const sourceColumns = allColumns.filter(\n    d =>\n      !d.isPivotSource &&\n      !state.groupBy.includes(d.id) &&\n      !state.pivotColumns.includes(d.id)\n  )\n\n  const buildPivotColumns = (depth = 0, parent, pivotFilters = []) => {\n    const pivotColumn = pivotColumns[depth]\n\n    if (!pivotColumn) {\n      return sourceColumns.map(sourceColumn => {\n        // TODO: We could offer support here for renesting pivoted\n        // columns inside copies of their header groups. For now,\n        // that seems like it would be (1) overkill on nesting, considering\n        // you already get nesting for every pivot level and (2)\n        // really hard. :)\n\n        return {\n          ...sourceColumn,\n          canPivot: false,\n          isPivoted: true,\n          parent,\n          depth: depth,\n          id: `${parent ? `${parent.id}.${sourceColumn.id}` : sourceColumn.id}`,\n          accessor: (originalRow, i, row) => {\n            if (pivotFilters.every(filter => filter(row))) {\n              return row.values[sourceColumn.id]\n            }\n          },\n        }\n      })\n    }\n\n    const uniqueValues = Array.from(pivotColumn.uniqueValues).sort()\n\n    return uniqueValues.map(uniqueValue => {\n      const columnGroup = {\n        ...pivotColumn,\n        Header:\n          pivotColumn.PivotHeader || typeof pivotColumn.header === 'string'\n            ? `${pivotColumn.Header}: ${uniqueValue}`\n            : uniqueValue,\n        isPivotGroup: true,\n        parent,\n        depth,\n        id: parent\n          ? `${parent.id}.${pivotColumn.id}.${uniqueValue}`\n          : `${pivotColumn.id}.${uniqueValue}`,\n        pivotValue: uniqueValue,\n      }\n\n      columnGroup.columns = buildPivotColumns(depth + 1, columnGroup, [\n        ...pivotFilters,\n        row => row.values[pivotColumn.id] === uniqueValue,\n      ])\n\n      return columnGroup\n    })\n  }\n\n  const newMaterialized = flattenColumns(buildPivotColumns())\n\n  return [...materialized, ...newMaterialized]\n}\n\nfunction materializedColumnsDeps(\n  deps,\n  {\n    instance: {\n      state: { pivotColumns, groupBy },\n    },\n  }\n) {\n  return [...deps, pivotColumns, groupBy]\n}\n\nfunction visibleColumns(visibleColumns, { instance: { state } }) {\n  visibleColumns = visibleColumns.filter(d => !d.isPivotSource)\n\n  if (state.pivotColumns.length && state.groupBy && state.groupBy.length) {\n    visibleColumns = visibleColumns.filter(\n      column => column.isGrouped || column.isPivoted\n    )\n  }\n\n  return visibleColumns\n}\n\nfunction visibleColumnsDeps(deps, { instance }) {\n  return [...deps, instance.state.pivotColumns, instance.state.groupBy]\n}\n\nfunction useInstance(instance) {\n  const {\n    columns,\n    allColumns,\n    flatHeaders,\n    // pivotFn = defaultPivotFn,\n    // manualPivot,\n    getHooks,\n    plugins,\n    dispatch,\n    autoResetPivot = true,\n    manaulPivot,\n    disablePivot,\n    defaultCanPivot,\n  } = instance\n\n  ensurePluginOrder(plugins, ['useGroupBy'], 'usePivotColumns')\n\n  const getInstance = useGetLatest(instance)\n\n  allColumns.forEach(column => {\n    const {\n      accessor,\n      defaultPivot: defaultColumnPivot,\n      disablePivot: columnDisablePivot,\n    } = column\n\n    column.canPivot = accessor\n      ? getFirstDefined(\n          column.canPivot,\n          columnDisablePivot === true ? false : undefined,\n          disablePivot === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(\n          column.canPivot,\n          defaultColumnPivot,\n          defaultCanPivot,\n          false\n        )\n\n    if (column.canPivot) {\n      column.togglePivot = () => instance.togglePivot(column.id)\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell\n  })\n\n  const togglePivot = (columnId, value) => {\n    dispatch({ type: actions.togglePivot, columnId, value })\n  }\n\n  flatHeaders.forEach(header => {\n    header.getPivotToggleProps = makePropGetter(\n      getHooks().getPivotToggleProps,\n      {\n        instance: getInstance(),\n        header,\n      }\n    )\n  })\n\n  const getAutoResetPivot = useGetLatest(autoResetPivot)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetPivot()) {\n      dispatch({ type: actions.resetPivot })\n    }\n  }, [dispatch, manaulPivot ? null : columns])\n\n  Object.assign(instance, {\n    togglePivot,\n  })\n}\n\nfunction prepareRow(row) {\n  row.allCells.forEach(cell => {\n    // Grouped cells are in the pivotColumns and the pivot cell for the row\n    cell.isPivoted = cell.column.isPivoted\n  })\n}\n","import React from 'react'\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useGetLatest,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nconst pluginName = 'useRowSelect'\n\n// Actions\nactions.resetSelectedRows = 'resetSelectedRows'\nactions.toggleAllRowsSelected = 'toggleAllRowsSelected'\nactions.toggleRowSelected = 'toggleRowSelected'\n\nexport const useRowSelect = hooks => {\n  hooks.getToggleRowSelectedProps = [defaultGetToggleRowSelectedProps]\n  hooks.getToggleAllRowsSelectedProps = [defaultGetToggleAllRowsSelectedProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseRowSelect.pluginName = pluginName\n\nconst defaultGetToggleRowSelectedProps = (props, { instance, row }) => {\n  const { manualRowSelectedKey = 'isSelected' } = instance\n  let checked = false\n\n  if (row.original && row.original[manualRowSelectedKey]) {\n    checked = true\n  } else {\n    checked = row.isSelected\n  }\n\n  return [\n    props,\n    {\n      onChange: e => {\n        row.toggleRowSelected(e.target.checked)\n      },\n      style: {\n        cursor: 'pointer',\n      },\n      checked,\n      title: 'Toggle Row Selected',\n      indeterminate: row.isSomeSelected,\n    },\n  ]\n}\n\nconst defaultGetToggleAllRowsSelectedProps = (props, { instance }) => [\n  props,\n  {\n    onChange: e => {\n      instance.toggleAllRowsSelected(e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: instance.isAllRowsSelected,\n    title: 'Toggle All Rows Selected',\n    indeterminate: Boolean(\n      !instance.isAllRowsSelected &&\n        Object.keys(instance.state.selectedRowIds).length\n    ),\n  },\n]\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      selectedRowIds: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetSelectedRows) {\n    return {\n      ...state,\n      selectedRowIds: instance.initialState.selectedRowIds || {},\n    }\n  }\n\n  if (action.type === actions.toggleAllRowsSelected) {\n    const { value: setSelected } = action\n    const {\n      isAllRowsSelected,\n      rowsById,\n      nonGroupedRowsById = rowsById,\n    } = instance\n\n    const selectAll =\n      typeof setSelected !== 'undefined' ? setSelected : !isAllRowsSelected\n\n    // Only remove/add the rows that are visible on the screen\n    //  Leave all the other rows that are selected alone.\n    const selectedRowIds = Object.assign({}, state.selectedRowIds)\n\n    if (selectAll) {\n      Object.keys(nonGroupedRowsById).forEach(rowId => {\n        selectedRowIds[rowId] = true\n      })\n    } else {\n      Object.keys(nonGroupedRowsById).forEach(rowId => {\n        delete selectedRowIds[rowId]\n      })\n    }\n\n    return {\n      ...state,\n      selectedRowIds,\n    }\n  }\n\n  if (action.type === actions.toggleRowSelected) {\n    const { id, value: setSelected } = action\n    const { rowsById, selectSubRows = true } = instance\n\n    // Join the ids of deep rows\n    // to make a key, then manage all of the keys\n    // in a flat object\n    const row = rowsById[id]\n    const isSelected = row.isSelected\n    const shouldExist =\n      typeof setSelected !== 'undefined' ? setSelected : !isSelected\n\n    if (isSelected === shouldExist) {\n      return state\n    }\n\n    const newSelectedRowIds = { ...state.selectedRowIds }\n\n    const handleRowById = id => {\n      const row = rowsById[id]\n\n      if (!row.isGrouped) {\n        if (shouldExist) {\n          newSelectedRowIds[id] = true\n        } else {\n          delete newSelectedRowIds[id]\n        }\n      }\n\n      if (selectSubRows && row.subRows) {\n        return row.subRows.forEach(row => handleRowById(row.id))\n      }\n    }\n\n    handleRowById(id)\n\n    return {\n      ...state,\n      selectedRowIds: newSelectedRowIds,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    getHooks,\n    plugins,\n    rowsById,\n    nonGroupedRowsById = rowsById,\n    autoResetSelectedRows = true,\n    state: { selectedRowIds },\n    selectSubRows = true,\n    dispatch,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useFilters', 'useGroupBy', 'useSortBy'],\n    'useRowSelect'\n  )\n\n  const selectedFlatRows = React.useMemo(() => {\n    const selectedFlatRows = []\n\n    rows.forEach(row => {\n      const isSelected = selectSubRows\n        ? getRowIsSelected(row, selectedRowIds)\n        : !!selectedRowIds[row.id]\n      row.isSelected = !!isSelected\n      row.isSomeSelected = isSelected === null\n\n      if (isSelected) {\n        selectedFlatRows.push(row)\n      }\n    })\n\n    return selectedFlatRows\n  }, [rows, selectSubRows, selectedRowIds])\n\n  let isAllRowsSelected = Boolean(\n    Object.keys(nonGroupedRowsById).length && Object.keys(selectedRowIds).length\n  )\n\n  if (isAllRowsSelected) {\n    if (Object.keys(nonGroupedRowsById).some(id => !selectedRowIds[id])) {\n      isAllRowsSelected = false\n    }\n  }\n\n  const getAutoResetSelectedRows = useGetLatest(autoResetSelectedRows)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetSelectedRows()) {\n      dispatch({ type: actions.resetSelectedRows })\n    }\n  }, [dispatch, data])\n\n  const toggleAllRowsSelected = React.useCallback(\n    value => dispatch({ type: actions.toggleAllRowsSelected, value }),\n    [dispatch]\n  )\n\n  const toggleRowSelected = React.useCallback(\n    (id, value) => dispatch({ type: actions.toggleRowSelected, id, value }),\n    [dispatch]\n  )\n\n  const getInstance = useGetLatest(instance)\n\n  const getToggleAllRowsSelectedProps = makePropGetter(\n    getHooks().getToggleAllRowsSelectedProps,\n    { instance: getInstance() }\n  )\n\n  Object.assign(instance, {\n    selectedFlatRows,\n    isAllRowsSelected,\n    toggleRowSelected,\n    toggleAllRowsSelected,\n    getToggleAllRowsSelectedProps,\n  })\n}\n\nfunction prepareRow(row, { instance }) {\n  row.toggleRowSelected = set => instance.toggleRowSelected(row.id, set)\n\n  row.getToggleRowSelectedProps = makePropGetter(\n    instance.getHooks().getToggleRowSelectedProps,\n    { instance: instance, row }\n  )\n}\n\nfunction getRowIsSelected(row, selectedRowIds) {\n  if (selectedRowIds[row.id]) {\n    return true\n  }\n\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (getRowIsSelected(subRow, selectedRowIds)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n    return allChildrenSelected ? true : someSelected ? null : false\n  }\n\n  return false\n}\n","import React from 'react'\n\nimport {\n  actions,\n  functionalUpdate,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nconst defaultInitialRowStateAccessor = originalRow => ({})\nconst defaultInitialCellStateAccessor = originalRow => ({})\n\n// Actions\nactions.setRowState = 'setRowState'\nactions.setCellState = 'setCellState'\nactions.resetRowState = 'resetRowState'\n\nexport const useRowState = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseRowState.pluginName = 'useRowState'\n\nfunction reducer(state, action, previousState, instance) {\n  const {\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\n    rowsById,\n  } = instance\n\n  if (action.type === actions.init) {\n    return {\n      rowState: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetRowState) {\n    return {\n      ...state,\n      rowState: instance.initialState.rowState || {},\n    }\n  }\n\n  if (action.type === actions.setRowState) {\n    const { rowId, value } = action\n\n    const oldRowState =\n      typeof state.rowState[rowId] !== 'undefined'\n        ? state.rowState[rowId]\n        : initialRowStateAccessor(rowsById[rowId].original)\n\n    return {\n      ...state,\n      rowState: {\n        ...state.rowState,\n        [rowId]: functionalUpdate(value, oldRowState),\n      },\n    }\n  }\n\n  if (action.type === actions.setCellState) {\n    const { rowId, columnId, value } = action\n\n    const oldRowState =\n      typeof state.rowState[rowId] !== 'undefined'\n        ? state.rowState[rowId]\n        : initialRowStateAccessor(rowsById[rowId].original)\n\n    const oldCellState =\n      typeof oldRowState?.cellState?.[columnId] !== 'undefined'\n        ? oldRowState.cellState[columnId]\n        : initialCellStateAccessor(rowsById[rowId].original)\n\n    return {\n      ...state,\n      rowState: {\n        ...state.rowState,\n        [rowId]: {\n          ...oldRowState,\n          cellState: {\n            ...(oldRowState.cellState || {}),\n            [columnId]: functionalUpdate(value, oldCellState),\n          },\n        },\n      },\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const { autoResetRowState = true, data, dispatch } = instance\n\n  const setRowState = React.useCallback(\n    (rowId, value) =>\n      dispatch({\n        type: actions.setRowState,\n        rowId,\n        value,\n      }),\n    [dispatch]\n  )\n\n  const setCellState = React.useCallback(\n    (rowId, columnId, value) =>\n      dispatch({\n        type: actions.setCellState,\n        rowId,\n        columnId,\n        value,\n      }),\n    [dispatch]\n  )\n\n  const getAutoResetRowState = useGetLatest(autoResetRowState)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetRowState()) {\n      dispatch({ type: actions.resetRowState })\n    }\n  }, [data])\n\n  Object.assign(instance, {\n    setRowState,\n    setCellState,\n  })\n}\n\nfunction prepareRow(row, { instance }) {\n  const {\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\n    state: { rowState },\n  } = instance\n\n  if (row.original) {\n    row.state =\n      typeof rowState[row.id] !== 'undefined'\n        ? rowState[row.id]\n        : initialRowStateAccessor(row.original)\n\n    row.setState = updater => {\n      return instance.setRowState(row.id, updater)\n    }\n\n    row.cells.forEach(cell => {\n      if (!row.state.cellState) {\n        row.state.cellState = {}\n      }\n\n      cell.state =\n        typeof row.state.cellState[cell.column.id] !== 'undefined'\n          ? row.state.cellState[cell.column.id]\n          : initialCellStateAccessor(row.original)\n\n      cell.setState = updater => {\n        return instance.setCellState(row.id, cell.column.id, updater)\n      }\n    })\n  }\n}\n","import React from 'react'\n\nimport { functionalUpdate, actions } from '../publicUtils'\n\n// Actions\nactions.resetColumnOrder = 'resetColumnOrder'\nactions.setColumnOrder = 'setColumnOrder'\n\nexport const useColumnOrder = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.visibleColumnsDeps.push((deps, { instance }) => {\n    return [...deps, instance.state.columnOrder]\n  })\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.useInstance.push(useInstance)\n}\n\nuseColumnOrder.pluginName = 'useColumnOrder'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetColumnOrder) {\n    return {\n      ...state,\n      columnOrder: instance.initialState.columnOrder || [],\n    }\n  }\n\n  if (action.type === actions.setColumnOrder) {\n    return {\n      ...state,\n      columnOrder: functionalUpdate(action.columnOrder, state.columnOrder),\n    }\n  }\n}\n\nfunction visibleColumns(\n  columns,\n  {\n    instance: {\n      state: { columnOrder },\n    },\n  }\n) {\n  // If there is no order, return the normal columns\n  if (!columnOrder || !columnOrder.length) {\n    return columns\n  }\n\n  const columnOrderCopy = [...columnOrder]\n\n  // If there is an order, make a copy of the columns\n  const columnsCopy = [...columns]\n\n  // And make a new ordered array of the columns\n  const columnsInOrder = []\n\n  // Loop over the columns and place them in order into the new array\n  while (columnsCopy.length && columnOrderCopy.length) {\n    const targetColumnId = columnOrderCopy.shift()\n    const foundIndex = columnsCopy.findIndex(d => d.id === targetColumnId)\n    if (foundIndex > -1) {\n      columnsInOrder.push(columnsCopy.splice(foundIndex, 1)[0])\n    }\n  }\n\n  // If there are any columns left, add them to the end\n  return [...columnsInOrder, ...columnsCopy]\n}\n\nfunction useInstance(instance) {\n  const { dispatch } = instance\n\n  instance.setColumnOrder = React.useCallback(\n    columnOrder => {\n      return dispatch({ type: actions.setColumnOrder, columnOrder })\n    },\n    [dispatch]\n  )\n}\n","import React from 'react'\n\nimport {\n  actions,\n  defaultColumn,\n  makePropGetter,\n  useGetLatest,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport { getFirstDefined, passiveEventSupported } from '../utils'\n\n// Default Column\ndefaultColumn.canResize = true\n\n// Actions\nactions.columnStartResizing = 'columnStartResizing'\nactions.columnResizing = 'columnResizing'\nactions.columnDoneResizing = 'columnDoneResizing'\nactions.resetResize = 'resetResize'\n\nexport const useResizeColumns = hooks => {\n  hooks.getResizerProps = [defaultGetResizerProps]\n  hooks.getHeaderProps.push({\n    style: {\n      position: 'relative',\n    },\n  })\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\n}\n\nconst defaultGetResizerProps = (props, { instance, header }) => {\n  const { dispatch } = instance\n\n  const onResizeStart = (e, header) => {\n    let isTouchEvent = false\n    if (e.type === 'touchstart') {\n      // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n      if (e.touches && e.touches.length > 1) {\n        return\n      }\n      isTouchEvent = true\n    }\n    const headersToResize = getLeafHeaders(header)\n    const headerIdWidths = headersToResize.map(d => [d.id, d.totalWidth])\n\n    const clientX = isTouchEvent ? Math.round(e.touches[0].clientX) : e.clientX\n\n    const dispatchMove = clientXPos => {\n      dispatch({ type: actions.columnResizing, clientX: clientXPos })\n    }\n    const dispatchEnd = () => dispatch({ type: actions.columnDoneResizing })\n\n    const handlersAndEvents = {\n      mouse: {\n        moveEvent: 'mousemove',\n        moveHandler: e => dispatchMove(e.clientX),\n        upEvent: 'mouseup',\n        upHandler: e => {\n          document.removeEventListener(\n            'mousemove',\n            handlersAndEvents.mouse.moveHandler\n          )\n          document.removeEventListener(\n            'mouseup',\n            handlersAndEvents.mouse.upHandler\n          )\n          dispatchEnd()\n        },\n      },\n      touch: {\n        moveEvent: 'touchmove',\n        moveHandler: e => {\n          if (e.cancelable) {\n            e.preventDefault()\n            e.stopPropagation()\n          }\n          dispatchMove(e.touches[0].clientX)\n          return false\n        },\n        upEvent: 'touchend',\n        upHandler: e => {\n          document.removeEventListener(\n            handlersAndEvents.touch.moveEvent,\n            handlersAndEvents.touch.moveHandler\n          )\n          document.removeEventListener(\n            handlersAndEvents.touch.upEvent,\n            handlersAndEvents.touch.moveHandler\n          )\n          dispatchEnd()\n        },\n      },\n    }\n\n    const events = isTouchEvent\n      ? handlersAndEvents.touch\n      : handlersAndEvents.mouse\n    const passiveIfSupported = passiveEventSupported()\n      ? { passive: false }\n      : false\n    document.addEventListener(\n      events.moveEvent,\n      events.moveHandler,\n      passiveIfSupported\n    )\n    document.addEventListener(\n      events.upEvent,\n      events.upHandler,\n      passiveIfSupported\n    )\n\n    dispatch({\n      type: actions.columnStartResizing,\n      columnId: header.id,\n      columnWidth: header.totalWidth,\n      headerIdWidths,\n      clientX,\n    })\n  }\n\n  return [\n    props,\n    {\n      onMouseDown: e => e.persist() || onResizeStart(e, header),\n      onTouchStart: e => e.persist() || onResizeStart(e, header),\n      style: {\n        cursor: 'ew-resize',\n      },\n      draggable: false,\n      role: 'separator',\n    },\n  ]\n}\n\nuseResizeColumns.pluginName = 'useResizeColumns'\n\nfunction reducer(state, action) {\n  if (action.type === actions.init) {\n    return {\n      columnResizing: {\n        columnWidths: {},\n      },\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetResize) {\n    return {\n      ...state,\n      columnResizing: {\n        columnWidths: {},\n      },\n    }\n  }\n\n  if (action.type === actions.columnStartResizing) {\n    const { clientX, columnId, columnWidth, headerIdWidths } = action\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: clientX,\n        headerIdWidths,\n        columnWidth,\n        isResizingColumn: columnId,\n      },\n    }\n  }\n\n  if (action.type === actions.columnResizing) {\n    const { clientX } = action\n    const { startX, columnWidth, headerIdWidths } = state.columnResizing\n\n    const deltaX = clientX - startX\n    const percentageDeltaX = deltaX / columnWidth\n\n    const newColumnWidths = {}\n\n    headerIdWidths.forEach(([headerId, headerWidth]) => {\n      newColumnWidths[headerId] = Math.max(\n        headerWidth + headerWidth * percentageDeltaX,\n        0\n      )\n    })\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        columnWidths: {\n          ...state.columnResizing.columnWidths,\n          ...newColumnWidths,\n        },\n      },\n    }\n  }\n\n  if (action.type === actions.columnDoneResizing) {\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: null,\n        isResizingColumn: null,\n      },\n    }\n  }\n}\n\nconst useInstanceBeforeDimensions = instance => {\n  const {\n    flatHeaders,\n    disableResizing,\n    getHooks,\n    state: { columnResizing },\n  } = instance\n\n  const getInstance = useGetLatest(instance)\n\n  flatHeaders.forEach(header => {\n    const canResize = getFirstDefined(\n      header.disableResizing === true ? false : undefined,\n      disableResizing === true ? false : undefined,\n      true\n    )\n\n    header.canResize = canResize\n    header.width =\n      columnResizing.columnWidths[header.id] ||\n      header.originalWidth ||\n      header.width\n    header.isResizing = columnResizing.isResizingColumn === header.id\n\n    if (canResize) {\n      header.getResizerProps = makePropGetter(getHooks().getResizerProps, {\n        instance: getInstance(),\n        header,\n      })\n    }\n  })\n}\n\nfunction useInstance(instance) {\n  const { plugins, dispatch, autoResetResize = true, columns } = instance\n\n  ensurePluginOrder(plugins, ['useAbsoluteLayout'], 'useResizeColumns')\n\n  const getAutoResetResize = useGetLatest(autoResetResize)\n  useMountedLayoutEffect(() => {\n    if (getAutoResetResize()) {\n      dispatch({ type: actions.resetResize })\n    }\n  }, [columns])\n\n  const resetResizing = React.useCallback(\n    () => dispatch({ type: actions.resetResize }),\n    [dispatch]\n  )\n\n  Object.assign(instance, {\n    resetResizing,\n  })\n}\n\nfunction getLeafHeaders(header) {\n  const leafHeaders = []\n  const recurseHeader = header => {\n    if (header.columns && header.columns.length) {\n      header.columns.map(recurseHeader)\n    }\n    leafHeaders.push(header)\n  }\n  recurseHeader(header)\n  return leafHeaders\n}\n","const cellStyles = {\n  position: 'absolute',\n  top: 0,\n}\n\nexport const useAbsoluteLayout = hooks => {\n  hooks.getTableBodyProps.push(getRowStyles)\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n  hooks.getFooterGroupProps.push(getRowStyles)\n\n  hooks.getHeaderProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${column.totalLeft}px`,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getCellProps.push((props, { cell }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${cell.column.totalLeft}px`,\n        width: `${cell.column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getFooterProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${column.totalLeft}px`,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n}\n\nuseAbsoluteLayout.pluginName = 'useAbsoluteLayout'\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      position: 'relative',\n      width: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n","const cellStyles = {\n  display: 'inline-block',\n  boxSizing: 'border-box',\n}\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      display: 'flex',\n      width: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n\nexport const useBlockLayout = hooks => {\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n  hooks.getFooterGroupProps.push(getRowStyles)\n\n  hooks.getHeaderProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getCellProps.push((props, { cell }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${cell.column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getFooterProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n}\n\nuseBlockLayout.pluginName = 'useBlockLayout'\n","export function useFlexLayout(hooks) {\n  hooks.getTableProps.push(getTableProps)\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n  hooks.getFooterGroupProps.push(getRowStyles)\n  hooks.getHeaderProps.push(getHeaderProps)\n  hooks.getCellProps.push(getCellProps)\n  hooks.getFooterProps.push(getFooterProps)\n}\n\nuseFlexLayout.pluginName = 'useFlexLayout'\n\nconst getTableProps = (props, { instance }) => [\n  props,\n  {\n    style: {\n      minWidth: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      display: 'flex',\n      flex: '1 0 auto',\n      minWidth: `${instance.totalColumnsMinWidth}px`,\n    },\n  },\n]\n\nconst getHeaderProps = (props, { column }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: column.totalFlexWidth\n        ? `${column.totalFlexWidth} 0 auto`\n        : undefined,\n      minWidth: `${column.totalMinWidth}px`,\n      width: `${column.totalWidth}px`,\n    },\n  },\n]\n\nconst getCellProps = (props, { cell }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: `${cell.column.totalFlexWidth} 0 auto`,\n      minWidth: `${cell.column.totalMinWidth}px`,\n      width: `${cell.column.totalWidth}px`,\n    },\n  },\n]\n\nconst getFooterProps = (props, { column }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: column.totalFlexWidth\n        ? `${column.totalFlexWidth} 0 auto`\n        : undefined,\n      minWidth: `${column.totalMinWidth}px`,\n      width: `${column.totalWidth}px`,\n    },\n  },\n]\n"],"names":["actions","init","defaultColumn","Cell","value","width","minWidth","maxWidth","Number","MAX_SAFE_INTEGER","mergeProps","propList","reduce","props","next","style","className","makePropGetter","hooks","meta","userProps","prev","handlePropGetter","prevProps","Array","isArray","reduceHooks","initial","allowUndefined","loopHooks","context","forEach","hook","ensurePluginOrder","plugins","befores","pluginName","afters","findIndex","plugin","before","functionalUpdate","updater","old","useGetLatest","obj","ref","React","useRef","current","useCallback","safeUseLayoutEffect","document","useLayoutEffect","useEffect","useMountedLayoutEffect","fn","deps","mountedRef","makeRenderer","instance","column","type","Comp","console","info","Error","flexRender","component","proto","Object","getPrototypeOf","prototype","isReactComponent","isClassComponent","$$typeof","includes","description","isExoticComponent","linkColumnStructure","columns","parent","depth","map","assignColumnAccessor","flattenColumns","flattenBy","id","accessor","Header","accessorPath","split","row","path","def","val","cacheKey","JSON","stringify","pathObj","pathObjCache","get","flattenDeep","arr","newArr","i","length","push","d","String","replace","join","reOpenBracket","reCloseBracket","makePathArray","set","cursor","pathPart","e","getBy","error","assign","decorateColumn","userDefaultColumn","Footer","originalWidth","makeHeaderGroups","allColumns","headerGroups","scanColumns","uid","getUID","headerGroup","headers","parentColumns","hasParents","some","newParent","latestParentColumn","reverse","originalId","placeholderOf","Map","getFirstDefined","args","isFunction","a","key","flat","recurse","expandRows","rows","manualExpandedKey","expanded","expandSubRows","expandedRows","handleRow","isExpanded","original","canExpand","subRows","getFilterMethod","filter","userFilterTypes","filterTypes","text","shouldAutoRemoveFilter","autoRemove","unpreparedAccessWarning","passiveSupported","defaultGetTableProps","role","defaultGetTableBodyProps","defaultGetHeaderProps","colSpan","totalVisibleHeaderCount","defaultGetFooterProps","defaultGetHeaderGroupProps","index","defaultGetFooterGroupProps","defaultGetRowProps","defaultGetCellProps","cell","makeDefaultPluginHooks","useOptions","stateReducers","useControlledState","columnsDeps","allColumnsDeps","accessValue","materializedColumns","materializedColumnsDeps","useInstanceAfterData","visibleColumns","visibleColumnsDeps","headerGroupsDeps","useInstanceBeforeDimensions","useInstance","prepareRow","getTableProps","getTableBodyProps","getHeaderGroupProps","getFooterGroupProps","getHeaderProps","getFooterProps","getRowProps","getCellProps","useFinalInstance","resetHiddenColumns","toggleHideColumn","setHiddenColumns","toggleHideAllColumns","useColumnVisibility","getToggleHiddenProps","defaultGetToggleHiddenProps","getToggleHideAllColumnsProps","defaultGetToggleHideAllColumnsProps","reducer","state","hiddenColumns","onChange","toggleHidden","target","checked","isVisible","title","allColumnsHidden","indeterminate","action","previousState","initialState","columnId","subHeader","handleColumn","parentVisible","subColumn","flatHeaders","dispatch","getHooks","autoResetHiddenColumns","getInstance","getAutoResetHiddenColumns","defaultInitialState","defaultColumnInstance","defaultReducer","prevState","defaultGetSubRows","defaultGetRowId","defaultUseControlledState","applyDefaults","getSubRows","getRowId","stateReducer","calculateHeaderWidths","left","sumTotalMinWidth","sumTotalWidth","sumTotalMaxWidth","sumTotalFlexWidth","header","subHeaders","totalLeft","totalMinWidth","totalWidth","totalMaxWidth","totalFlexWidth","Math","min","max","canResize","accessRowsForColumn","data","flatRows","rowsById","accessValueHooks","originalRow","rowIndex","accessRow","parentRows","originalSubRows","cells","values","undefined","resetExpanded","toggleRowExpanded","toggleAllRowsExpanded","useExpanded","getToggleAllRowsExpandedProps","defaultGetToggleAllRowsExpandedProps","getToggleRowExpandedProps","defaultGetToggleRowExpandedProps","onClick","isAllRowsExpanded","keys","rowId","setExpanded","exists","shouldExist","paginateExpandedRows","autoResetExpanded","getAutoResetExpanded","Boolean","useMemo","expandedDepth","maxDepth","splitId","findExpandedDepth","preExpandedRows","ids","filterValue","rowValue","toLowerCase","exactText","exactTextCase","includesAll","every","includesSome","includesValue","exact","equals","between","Infinity","temp","resetFilters","setFilter","setAllFilters","useFilters","filters","find","filterMethod","previousfilter","newFilter","manualFilters","defaultCanFilter","disableFilters","autoResetFilters","columnDefaultCanFilter","columnDisableFilters","canFilter","found","filteredFlatRows","filteredRowsById","filterRows","filteredRows","filteredSoFar","preFilteredRows","warn","getAutoResetFilters","preFilteredFlatRows","preFilteredRowsById","resetGlobalFilter","setGlobalFilter","useGlobalFilter","globalFilter","manualGlobalFilter","globalFilterValue","autoResetGlobalFilter","disableGlobalFilter","columnDisableGlobalFilter","filterableColumns","c","globalFilteredRows","globalFilteredFlatRows","globalFilteredRowsById","getAutoResetGlobalFilter","preGlobalFilteredRows","preGlobalFilteredFlatRows","preGlobalFilteredRowsById","sum","aggregatedValues","from","Set","size","emptyArray","emptyObject","resetGroupBy","toggleGroupBy","useGroupBy","getGroupByToggleProps","defaultGetGroupByToggleProps","groupBy","canGroupBy","persist","setGroupBy","resolvedGroupBy","groupByColumns","g","col","nonGroupByColumns","isGrouped","groupedIndex","indexOf","defaultUserAggregations","groupByFn","defaultGroupByFn","manualGroupBy","aggregations","userAggregations","autoResetGroupBy","disableGroupBy","defaultCanGroupBy","defaultColumnGroupBy","defaultGroupBy","columnDisableGroupBy","Aggregated","existingGroupBy","groupedFlatRows","groupedRowsById","onlyGroupedFlatRows","onlyGroupedRowsById","nonGroupedFlatRows","nonGroupedRowsById","groupedRows","groupUpRecursively","parentId","rowGroupsMap","entries","groupByVal","leafRows","groupedValues","leafValues","columnValue","aggregateValue","aggregateValueFn","aggregateFn","aggregate","aggregateRowsToValues","groupByID","subRow","getAutoResetGroupBy","preGroupedRows","preGroupedFlatRow","preGroupedRowsById","allCells","isPlaceholder","isAggregated","resKey","reSplitAlphaNumeric","compareBasic","b","getRowValueByColumnID","toString","isNaN","rowA","rowB","aa","shift","bb","an","parseInt","bn","combo","sort","getTime","resetSortBy","toggleSortBy","clearSortBy","sortType","sortDescFirst","useSortBy","getSortByToggleProps","defaultGetSortByToggleProps","isMultiSortEvent","shiftKey","canSort","disableMultiSort","sortBy","sortAction","desc","multi","disableSortRemove","disableMultiRemove","maxMultiSortColCount","existingSortBy","existingIndex","hasDescDefined","newSortBy","splice","orderByFn","defaultOrderByFn","userSortTypes","sortTypes","manualSortBy","defaultCanSort","disableSortBy","autoResetSortBy","defaultColumnCanSort","columnDisableSortBy","columnSort","isSorted","sortedIndex","isSortedDesc","sortedFlatRows","availableSortBy","sortData","sortedData","sortMethod","sortInverted","sortedRows","getAutoResetSortBy","preSortedRows","preSortedFlatRows","funcs","dirs","sortFn","sortInt","resetPage","gotoPage","setPageSize","usePagination","pageSize","pageIndex","pageCount","page","newPageIndex","canNavigate","topRowIndex","floor","autoResetPage","userPageCount","manualPagination","getAutoResetPage","ceil","pageOptions","fill","pageStart","pageEnd","slice","canPreviousPage","canNextPage","previousPage","nextPage","resetPivot","togglePivot","_UNSTABLE_usePivotColumns","getPivotToggleProps","defaultGetPivotToggleProps","defaultPivotColumns","canPivot","pivotColumns","setPivot","resolvedPivot","isPivotSource","uniqueValues","add","materialized","sourceColumns","newMaterialized","buildPivotColumns","pivotFilters","pivotColumn","uniqueValue","columnGroup","PivotHeader","isPivotGroup","pivotValue","sourceColumn","isPivoted","autoResetPivot","manaulPivot","disablePivot","defaultCanPivot","defaultColumnPivot","defaultPivot","columnDisablePivot","getAutoResetPivot","resetSelectedRows","toggleAllRowsSelected","toggleRowSelected","useRowSelect","getToggleRowSelectedProps","defaultGetToggleRowSelectedProps","getToggleAllRowsSelectedProps","defaultGetToggleAllRowsSelectedProps","manualRowSelectedKey","isSelected","isSomeSelected","isAllRowsSelected","selectedRowIds","setSelected","selectAll","selectSubRows","newSelectedRowIds","handleRowById","autoResetSelectedRows","selectedFlatRows","getRowIsSelected","allChildrenSelected","someSelected","getAutoResetSelectedRows","defaultInitialRowStateAccessor","defaultInitialCellStateAccessor","setRowState","setCellState","resetRowState","useRowState","initialRowStateAccessor","initialCellStateAccessor","rowState","oldRowState","oldCellState","cellState","_oldRowState$cellStat","autoResetRowState","getAutoResetRowState","setState","resetColumnOrder","setColumnOrder","useColumnOrder","columnOrder","columnOrderCopy","columnsCopy","columnsInOrder","targetColumnId","foundIndex","columnStartResizing","columnResizing","columnDoneResizing","resetResize","useResizeColumns","getResizerProps","defaultGetResizerProps","position","onResizeStart","isTouchEvent","touches","headerIdWidths","leafHeaders","recurseHeader","getLeafHeaders","clientX","round","dispatchMove","clientXPos","dispatchEnd","handlersAndEvents","mouse","moveEvent","moveHandler","upEvent","upHandler","removeEventListener","touch","cancelable","preventDefault","stopPropagation","events","passiveIfSupported","supported","options","window","addEventListener","err","passiveEventSupported","passive","columnWidth","onMouseDown","onTouchStart","draggable","columnWidths","startX","isResizingColumn","percentageDeltaX","newColumnWidths","headerId","headerWidth","disableResizing","isResizing","autoResetResize","getAutoResetResize","resetResizing","cellStyles","top","useAbsoluteLayout","getRowStyles","totalColumnsWidth","display","boxSizing","useBlockLayout","useFlexLayout","flex","totalColumnsMinWidth","defaultFn","defaultWait","debounceRef","getDefaultFn","getDefaultWait","promise","Promise","resolve","reject","timeout","clearTimeout","setTimeout","instanceRef","userColumns","getStateReducer","s","handler","useReducer","reducerState","allColumnsQueue","initialRows","all","visibleColumnsDep","totalColumnsMaxWidth","render","footerGroups"],"mappings":"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"}